/* 
 * Copyright 2015 PermeAgility Incorporated.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package permeagility.web;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

import permeagility.util.DatabaseConnection;
import permeagility.util.QueryCache;
import permeagility.util.QueryResult;
import permeagility.util.Setup;

import com.orientechnologies.orient.core.id.ORID;
import com.orientechnologies.orient.core.id.ORecordId;
import com.orientechnologies.orient.core.record.impl.ODocument;

/** The Weblet help you build web pages with simple functional coding - can't be explained here - see examples */
public abstract class Weblet {

    public static final String CHARACTER_ENCODING = "utf-8";
    public static final Charset charset = Charset.forName("UTF-8");

    // These values can be overridden using the constant override - use permeagility.web.Context as this class is abstract
    public static int START_HOUR = 0;
    public static boolean TOP_OF_DAY = true;
    public static boolean INCLUSIVE_END_DAY = true;
    public static String INT_FORMAT = "#,##0";
    public static String FLOAT_FORMAT = "#,##0.00";
    public static String DATE_FORMAT = "yyyy-MM-dd";
    public static String TIME_FORMAT = "HH:mm:ss";
    public static String DECIMAL_FORMAT = "#,##0;(#,##0)";
    public static String DATE_CONTROL_FORMAT = "%Y-%m-%d";
    public static String TIME_CONTROL_FORMAT = "%k:%M:%S";
    // Must be a valid JS Calendar style Working: blue2, brown, green, win2k-1, win2k-2, win2k-cold-1, win2k-cold-2   Not working: blue, system, tas
    public static String DATE_CONTROL_STYLE = "blue2";  
    public static String DEFAULT_STYLE = "default";
    public static String POPUP_SUFFIX = "..";
    public static boolean JQUERY_MIN = false;  // Set to true to reduce download time but sacrifice debug messages of any value
    public static boolean ANGULAR_MIN = false;  // Set to true to reduce download time but sacrifice debug messages of any value
    public static String NONE_STRING = "null";  // this is what a null reference will convert to on description lookups (when something is deleted)

    // Override this to add body attributes (but don't remove the one that's there unless you are doing your own controls)
    public static String BODY_OPTIONS = "ng-app='permeagility'";
    public static String SCREEN_FADE = "<div class=\"screenfade\"></div>";  // Injected into body to provide background 'blur' for a popup

    static QueryCache queryCache = new QueryCache();  // protected so that server can refresh it

    public static QueryCache getCache() {
            return queryCache;
    }

    private DatabaseConnection internal_con;  // This will use the user's connection to get styles

    protected byte[] doPage(DatabaseConnection con, HashMap<String, String> parms) {
            internal_con = con; // For style retrieval
            StringBuilder response = new StringBuilder();
            response.append("<!DOCTYPE html>\n<html>\n");
            response.append(getPage(con, parms));
            response.append("</html>\n");
            return response.toString().getBytes(charset);
    }

    public abstract String getPage(DatabaseConnection con, java.util.HashMap<String, String> parms);

    public String head(String s) { return head(s, ""); }

    public String head(String s, String script) {
        return "<head>\n" + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset="+CHARACTER_ENCODING+"\">\n"
            + "<meta http-equiv=\"Pragma\" content=\"no-cache\">\n" + "<meta http-equiv=\"Expires\" content=\"-1\">\n"
            + "<meta http-equiv=\"Cache-Control\" content=\"no-cache\">\n"
            + "<meta name=\"GENERATOR\" content=\"HTML Document generated by PermeAgility\">\n" 
            + "<title>" + s + "</title>\n"
            + "<style type=\"text/css\">\n" + getStyles() + "</style>\n"
            // Add JQuery
            + (JQUERY_MIN ? "<script type=\"text/javascript\" src=\"/js/jquery-2.1.3.min.js\"></script>\n"
                            : "<script type=\"text/javascript\" src=\"/js/jquery-2.1.3.js\"></script>\n")
            // Add AngularJs
            + (ANGULAR_MIN ? "<script type=\"text/javascript\" src=\"/js/angular.min.js\"></script>\n"
                            : "<script type=\"text/javascript\" src=\"/js/angular.js\"></script>\n")
            // and the AngularJS functions to support PermeAgility controls
            +"<script type=\"text/javascript\" src=\"/js/angular-permeagility.js\"></script>\n"
            // Add functions for popup forms/buttons (will fade screen and popup form when popuplink clicked)
            // if click outside the popup (on the screen fade background), close the popup
            + "<script type=\"text/javascript\" charset=\"utf-8\">\n"
            +"  $(document).ready(function () {\n"
            + "   $('.screenwait').fadeOut(0); \n"
            +"    $('.submit,button').click(function(e) {\n"  // submit is clicked
            +"      var href = $(e.target).attr('href');"
            +"      if (href == undefined || href.substring(0,4) == 'data') return;\n"  // If no href must just be a button
            +"      var isngClick = $(e.target).attr('ng-click') !== undefined;\n"
            +"      if (!isngClick) {\n"
            +"        e.preventDefault();\n"
            +"        e.stopPropagation();\n"	
            + "       $('.screenfade').fadeIn('fast'); \n"
            + "       $('.canpopup').slideUp('fast');\n"
            +"        $(this).fadeOut(330, function() { $(this).unbind('click').click(); });\n"
            +"      }\n"
            +"	  });\n"
            +"    $('a:not(.popuplink),tr.clickable').click(function (e) {\n"      // When an anchor is clicked
            +"          var isButton = $(e.target).is(\":button\");\n"
            +"          var isngClick = $(e.target).attr('ng-click') !== undefined;\n"
            +"          if (!isButton && !isngClick) {\n"
            +"            e.preventDefault();\n"
            +"            var goTo = this.getAttribute(\"href\");\n"
            +"            var goToTarget = this.getAttribute(\"target\");\n"
            +"            if (goToTarget) {\n"
            +"               window.open(goTo); \n"
            +"            } else { \n"
            +"               $(\".screenfade\").fadeIn(200);\n"  // Pull up screen fade
            +"               setTimeout(function() { window.location = goTo; } , 200); \n"
            +"            }\n"
            +"          }\n"
            +"    });\n"
            +"    $('.popuplink').click(function (e) {\n"      // When the popuplink is clicked
            +"        e.preventDefault();\n"
            +"        e.stopPropagation();\n"
            +"        $(\".screenfade\").fadeIn(\"slow\");\n"  // Pull up screen fade
            +"        $(e.target).next(\".canpopup\").slideDown(\"fast\");\n"  // Slide down the popup
            +"        $('.canpopup :input[type!=hidden]:text:visible:first').focus();\n"  // Set focus on the first input
            +"    });\n"
            +"    $('.screenfade').click(function (e) {\n"   // When click on the screen fade (outside the popup)
            +"        $(\".screenfade\").fadeOut(\"slow\");\n"  // Fade out the screen fade
            +"        $('.canpopup').slideUp(\"fast\");\n"    // Slide up the popup
            +"    });\n"
            +"    $(document).on('mousedown', '.canpopup', function(e) {\n"
            +"      if ($(e.target).hasClass(\"banner\")) {\n"   // if mousedown on a banner
            +"        e.preventDefault(); \n"
            +"        $(this).addClass('draggable').parents().on('mousemove', function(e) {\n"  // Set it draggable and handle the event
            +"        	            $('.draggable').offset({ \n"
            +"                top: e.pageY,\n"
            +"                left: e.pageX - $('.draggable').outerWidth() / 2 \n"
            +"            }).on('mouseup', function() {  \n"
            +"                $(this).removeClass('draggable'); \n "
            +"            }); \n "
            +"        }); \n "
            +"      }\n"
            +"    }) \n"
            +"  });\n</script>\n"
            +getSortTableScript()
            + script + "\n"
            + "</head>\n";
    }


    public static String body(String s) { return "<body "+BODY_OPTIONS+">"+"\n" + s +SCREEN_FADE+ "</body>"; }
    public static String body(String c, String s) { return "<body "+BODY_OPTIONS+" class=\"" + c + "\">"+"\n" + s +SCREEN_FADE+ "</body>"; }
    public static String bodyOnLoad(String s, String l) { return "<body "+BODY_OPTIONS+" onLoad=\"" + l + "\">"+"\n" + s + SCREEN_FADE + "</body>"; }

    public static String span(String id, String s) { return "<span id=\"" + id + "\">\n" + s + "</span>\n"; }
    public static String div(String name, String contents) { return "<div id=\"" + name + "\">\n" + contents + "</div>\n"; }

    public static String standardLayout(DatabaseConnection con, java.util.HashMap<String, String> parms, String html) {
        if (Menu.HORIZONTAL_LAYOUT) {  // Needs menu over header
            return div("header", (new Header()).getHTML(con, parms)) 
                + div("menu", (new Menu()).getHTML(con, parms))
                + div("service", html);
        } else {  // Need header over menu
            return div("menu", (new Menu()).getHTML(con, parms))  
                + div("header", (new Header()).getHTML(con, parms)) 
                + div("service", html);			
        }
    }

    public String pleaseWait(String url) {
        return head("Please Wait", 
            "<script language=JavaScript>\n" + "function init(){\n" + "	window.location = \"" + url + "\";\n" + "}	\n" + "</script>\n")
            + "<body onload=init()>\n" + br() + br() + "<center><img src=\"../images/hourglass.gif\"></center>" + "</body>\n";
    }

    public String redirect(Locale locale, Object object, String parms) {
            return redirect(locale, object.getClass().getName(), parms);
    }

    public String redirect(Locale locale, Object object) {
            return redirect(locale, object.getClass().getName(), null);
    }

    public String redirect(Locale locale, String target) {
            return redirect(locale, target, null);
    }

    public String redirect(Locale locale, String classname, String parms) {
            return head(Message.get(locale, "REDIRECT"))
                            + bodyOnLoad(Message.get(locale, "REDIRECT")
                                    , "window.location.href='"+classname+(parms != null && !parms.equals("") ? "?"+parms : "")+"';");

    }
    public static String image(String s) { return "<img src=\"../images/" + s + "\">\n"; }
    public static String image(String c, String s) { return "<img class=\"" + c + "\" src=\"../images/" + s + "\">\n"; }

    public static String center(String s) { return "<center>\n" + s + "</center>\n"; }

    public static String h1(String s) { return "<h1>" + s + "</h1>\n"; }
    public static String h2(String s) { return "<h2>" + s + "</h2>\n"; }
    public static String h3(String s) { return "<h3>" + s + "</h3>\n"; }
    public static String h4(String s) { return "<h4>" + s + "</h4>\n"; }
    public static String h5(String s) { return "<h5>" + s + "</h5>\n"; }
    public static String h6(String s) { return "<h6>" + s + "</h6>\n"; }

    public static String paragraph(String s) { return "<p>" + s + "</p>\n"; }
    public static String paragraph(String c, String s) { return "<p class=\"" + c + "\">" + s + "</p>\n"; }
    public static String paragraphLeft(String c, String s) { return "<p align=\"left\" class=\"" + c + "\">" + s + "</p>\n"; }
    public static String paragraphLeft(String s) { return "<p align=\"left\">" + (s == null ? "&nbsp;" : s) + "</p>\n"; }
    public static String paragraphRight(String s) { return "<p align=\"right\">" + (s == null ? "&nbsp;" : s) + "</p>\n"; }
    public static String paragraphCenter(String s) { return "<p align=\"center\">" + (s == null ? "&nbsp;" : s) + "</p>\n"; }
    public static String alignRight(String s) { return "<p align=\"right\">" + (s == null ? "&nbsp;" : s)+ "</p>\n"; }

    public static String br() { return "<br>"; }
    public static String bold(String s) { return "<b>" + (s == null ? "&nbsp;" : s) + "</b>"; }
    public static String color(String c, String s) { return "<font color=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</font>"; }

    public static String fontSize(int size, String s) { return "<FONT SIZE=\"" + size + "\">" + (s == null ? "&nbsp;" : s) + "</FONT>"; }
    public static String xxSmall(String s) { return fontSize(1, s); }
    public static String xSmall(String s) { return fontSize(2, s); }
    public static String small(String s) { return fontSize(3, s); }
    public static String medium(String s) { return fontSize(4, s); }
    public static String large(String s) { return fontSize(5, s); }
    public static String xLarge(String s) { return fontSize(6, s); }
    public static String xxLarge(String s) { return fontSize(7, s); }

    /*   Table */
    public static String table(String s) { return table(0, s); }  // Default table has no border

    public static String table(int border, String s) {
        return "<table"+(border>0 ? " border=\"" + border + "\"" : "")+">\n" + s + "</table>\n";
    }

    public static String table(String c, String s) {
        return "<table class=\"" + c + "\">\n" + s + "</table>\n";
    }

    public static String tableStart(int border) {
        return "<table"+(border>0 ? " border=\"" + border + "\"" : "")+">\n";
    }

    public static String tableStart(String c) {
        return "<table class=\"" + c + "\">\n";
    }

    public static String tableStart(String width, String c) {
        return "<table width=\""+width+"\" class=\"" + c + "\">\n";
    }

    public static String tableEnd() {
        return "</table>\n";
    }

    /* Table Header, Body, Footer */
    public static String tableHeader(String c, String s) {
        return "<thead class=\"" + c + "\">" + s + "</thead>\n";
    }

    public static String tableHeader(String s) {
        return "<thead>\n" + s + "</thead>\n";
    }

    public static String tableBody(String c, String s) {
        return "<tbody class=\"" + c + "\">" + s + "</tbody>\n";
    }

    public static String tableBody(String s) {
        return "<tbody>\n" + s + "</tbody>\n";
    }

    public static String tableFooter(String c, String s) {
        return "<tfoot class=\"" + c + "\">\n" + s + "</tfoot>\n";
    }

    public static String tableFooter(String s) {
        return "<tfoot>" + s + "</tfoot>\n";
    }

    /*  Rows  */
    public static String row(String c, String s) {
        return "<tr class=\"" + c + "\">\n" + s + "</tr>\n";
    }

    public static String row(String s) {
        return "<tr valign=\"TOP\">\n" + s + "</tr>\n";
    }

    public static String rowOnClick(String c, String s, String onClick) {
        return rowOnClick(c, s, onClick, null);
    }

    public static String rowOnClick(String c, String s, String onClick, String title) {
        return "<tr class=\"" + c + "\" href=\"" + onClick + "\" "+(title!=null ? " title=\""+title+"\"" : "")+" >\n" + (s == null ? "&nbsp;" : s) + "</tr>\n";
    }

    /* Column headers - they should be used like a column */
    public static String columnHeader(String c, String s) {
        return "<th class=\"" + c + "\">\n" + s + "</th>\n";
    }

    public static String columnHeader(String s) {
        return "<th>\n" + s + "</th>\n";
    }

    public static String columnHeaderNoSort(String s) {
        return "<th class=\"sorttable_nosort\">\n" + s + "</th>\n";
    }

    /* Columns */
    public static String column(String s) {
        return "<td>" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String column(String c, String s) {
        return "<td class=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String column(String c, int width, String s) {
        return "<td class=\"" + c + "\" width=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String column(String c, int width, String s, String title) {
        return "<td class=\"" + c + "\" width=\"" + width + "%\" title=\""+ title +"\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String column(int width, String s) {
        return "<td width=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnOnClick(int width, String s, String onClick) {
        return "<td width=\"" + width + "%\" onClick=\"" + onClick + "\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnRight(int width, String s) {
        return "<td align=\"right\" width=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnColor(int width, String color) {
        return "<td bgcolor=\""+color+"\" width=\"" + width + "%\">" + (color == null ? "&nbsp;" : color) + "</td>\n";
    }

    public static String columnRight(String c, int width, String s) {
        return "<td align=\"right\" width=\"" + width + "%\" class=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnRight(String s) {
        return "<td align=\"right\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnRight(String c, String s) {
        return "<td align=\"right\" class=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnTop(int width, String s) {
        return "<td valign=\"top\" width=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnTopRight(int width, String s) {
        return "<td align=\"right\" valign=\"top\" width=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnCenter(int width, String s) {
        return "<td align=\"canter\" width=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnSpan(int width, String s) {
        return "<td colspan=\"" + width + "\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnSpanRight(int width, String s) {
        return "<td colspan=\"" + width + "\" align=\"right\" >" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnSpan(String c, int width, String s) {
        return "<td colspan=\"" + width + "\" class=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnNoWrap(String c, int width, String s) {
        return "<td nowrap width=\"" + width + "%\" class=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnNoWrap(int width, String s) {
        return "<td nowrap width=\"" + width + "%\" >" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnNoWrap(String s) {
        return "<td nowrap >" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnTopNoWrap(int width, String s) {
        return "<td valign=\"top\" nowrap width=\"" + width + "%\" >" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    public static String columnSpanNoWrap(int span, String c, int width, String s) {
        return "<td colspan=\"" + span + "\" nowrap width=\"" + width + "%\" class=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</td>\n";
    }

    /*  Forms  */
    public static String form(String n, String action, String s) {
        return "<form " + (n==null ? "" : "name=\""+n+"\"" ) + " action=\"" + (action==null ? "#" : action) + "\" "+
                "method=\"POST\" enctype=\"multipart/form-data\">\n" + s + "</form>\n";
    }
    public static String form(String n, String s) { return form(n, null, s); }
    public static String form(String s) { return form(null, null, s); }

    public static String formStart(String n, String action) {
    	return "<form name=\""+n+"\" action=\""+(action==null ? "#" : action)+"\" method=\"POST\" enctype=\"multipart/form-data\">\n";
    }
        
    public static String formEnd() { return "</form>\n"; }
    
    /** Creates a link which will popup a form containing the content given as a parameter */
    public static String popupForm(String formName, String action, String linkText, String linkClass, String focusField, String content) {
        return "<a class=\"popuplink\">"+linkText+POPUP_SUFFIX+"</a>\n"
                +"<div class=\"canpopup\">\n"
                +"<form id=\""+formName+"\" name=\""+formName+"\" method=\"post\" ENCTYPE=\"multipart/form-data\" action=\""+(action==null ? "#" : action)+"\" >\n"
                +content
                +"\n</form></div>\n";
    }
    
    public static String oldpopupForm(String formName, String action, String linkText, String linkClass, String focusField, String content) {
        return "<a "+(linkClass!=null ? "class=\""+linkClass+"\"" : "")+" href=\"javascript:var%20f=document.getElementById('"+formName+"_DIV');%20f.style.display=(f.style.display=='block'?'none':'block');%20%20%20document.forms['"+formName+"']."+focusField+".focus();%20%20void%200;\">"+linkText+POPUP_SUFFIX+"</a>"
            +"<div id=\""+formName+"_DIV\" class=\"popup\" style=\"position: absolute; margin-top: -0.4em;\">"
            +"<form id=\""+formName+"\" name=\""+formName+"\" method=\"post\" enc=\"multipart/form-data\" action=\""+(action!=null ? action : "#" )+"\" onsubmit=\"document.getElementById('"+formName+"_DIV').style.display='none'; return true;\" class=\"subtle small\" style=\"position: relative; left: 1em; top: 2px;\">"
            +content
            +"</form></div>";
    }

    public static String fieldSet(String s) {
        return "<fieldset>" + s + "</fieldset>";
    }

    public static String hidden(String n, Object value) {
            return "<input type=\"HIDDEN\" name=\"" + n + "\" value=\"" + (value == null ? "" : value) + "\">";
    }

    public static String TEXT_INPUT_OPTIONS = "spellcheck=\"false\"";  // Clear this to enable spell checking, add to this to add options to textual input fields

    public String input(int tabIndex, String n, Object value) {
            return "<input "+TEXT_INPUT_OPTIONS+" name=\"" + n + "\" " + (isReadOnly() ? "DISABLED" : "") + "  value=\"" + (value == null ? "" : value)
                            + "\" tabindex=" + tabIndex + ">";
    }

    public String input(int tabIndex, String c, String n, Object value) {
            return "<input "+TEXT_INPUT_OPTIONS+" class=\"" + c + "\" name=\"" + n + "\" type=\"TEXT\" " + (isReadOnly() ? "DISABLED" : "") + "  value=\""
                            + (value == null ? "" : value) + "\" TABINDEX=" + tabIndex + ">";
    }

    public String input(String n, Object value) {
            return "<input "+TEXT_INPUT_OPTIONS+" name=\"" + n + "\" " + (isReadOnly() ? "DISABLED" : "") + "  value=\"" + (value == null ? "" : value) + "\">";
    }

    public String input(String c, String n, Object value) {
            return "<input "+TEXT_INPUT_OPTIONS+" class=\"" + c + "\" name=\"" + n + "\" type=\"TEXT\" " + (isReadOnly() ? "DISABLED" : "") + "  value=\"" + (value == null ? "" : value) + "\">";
    }

    public String input(String c, String n, Object value, int size) {
            return "<input "+TEXT_INPUT_OPTIONS+" class=\"" + c + "\" name=\"" + n + "\" type=\"TEXT\" size=" + size + (isReadOnly() ? "DISABLED" : "") + "  value=\"" + (value == null ? "" : value) + "\">";
    }

    public String input(String n, Object value, int size) {
            return "<input "+TEXT_INPUT_OPTIONS+" name=\"" + n + "\" size=" + size + " " + (isReadOnly() ? "DISABLED" : "") + "  value=\"" + (value == null ? "" : value) + "\">";
    }

    public String inputChanged(String n, Object value, String onChange, int size) {
            return "<input "+TEXT_INPUT_OPTIONS+" " + (isReadOnly() ? "DISABLED" : "") + " name=\"" + n + "\" size=" + size + " onChange=\"" + onChange
                            + "\" value=\"" + (value == null ? "" : value) + "\">";
    }

    public String inputChanged(String n, Object value, String onChange) {
            return "<input "+TEXT_INPUT_OPTIONS+" " + (isReadOnly() ? "DISABLED" : "") + " name=\"" + n + "\" onChange=\"" + onChange + "\" value=\""
                            + (value == null ? "" : value) + "\">";
    }

    public static String inputDisabled(String n, Object value, int size) {
            return "<input name=\"" + n + "\" size=" + size + " DISABLED value=\"" + (value == null ? "" : value) + "\">";
    }

    public static String password() {
            return "<input type=\"PASSWORD\" name=\"PASSWORD\">";
    }

    public static String password(String value) {
            return "<input type=\"PASSWORD\" name=\"PASSWORD\" value=\"" + (value == null ? "" : value) + "\">";
    }

    public String checkbox(String name) {
            return "<input type=\"CHECKBOX\" " + (isReadOnly() ? "DISABLED" : "") + " name=\"" + name + "\">";
    }

    public String checkbox(String name, boolean checked) {
            return "<input type=\"CHECKBOX\" " + (isReadOnly() ? "DISABLED" : "") + " name=\"" + name + "\"" + ((checked) ? " CHECKED " : "") + ">";
    }

    public static String checkboxDisabled(String name) {
            return "<input type=\"CHECKBOX\" DISABLED name=\"" + name + "\">";
    }

    public static String checkboxDisabled(String name, boolean checked) {
            return "<input type=\"CHECKBOX\" DISABLED name=\"" + name + "\"" + ((checked) ? " CHECKED " : "") + ">";
    }

    public String radio(String name, String value) {
            return "<input type=\"RADIO\" " + (isReadOnly() ? "DISABLED" : "") + " name=\"" + name + "\" value=\"" + value + "\">";
    }

    public String radioChecked(String name, String value) {
            return "<input " + (isReadOnly() ? "DISABLED" : "") + " CHECKED type=\"RADIO\" name=\"" + name + "\" value=\"" + value + "\">";
    }

    public String textArea(String n, Object s) {
            return textArea(n, s, 10, 40);
    }

    public String textArea(String n, Object s, int rows, int cols) {
            return "<textarea "+TEXT_INPUT_OPTIONS+" name=\"" + n + "\" rows=\"" + rows + "\" cols=\"" + cols + "\" " + (isReadOnly() ? " READONLY " : "")
                            + " >" + (s == null ? "" : s) + "</textarea>";
    }

    public String textArea(String n, Object s, int rows, int cols, String option) {
            return "<textarea "+TEXT_INPUT_OPTIONS+" name=\"" + n + "\" rows=\"" + rows + "\" cols=\"" + cols + "\" " + (isReadOnly() ? " READONLY " : " ")
                            + option + ">" + (s == null ? "" : s) + "</textarea>";
    }

    public static String textAreaDisabled(String n, Object s, int rows, int cols) {
            return "<textarea "+TEXT_INPUT_OPTIONS+" name=\"" + n + "\" rows=\"" + rows + "\" cols=\"" + cols + "\" DISABLED >" + (s == null ? "" : s) + "</textarea>";
    }

    public static String textAreaReadOnly(String n, Object s, int rows, int cols) {
            return "<textarea name=\"" + n + "\" rows=\"" + rows + "\" cols=\"" + cols + "\" READONLY >" + (s == null ? "" : s) + "</textarea>";
    }

    public String submitButton(Locale l, String s) {
        return button("SUBMIT", s, Message.get(l,s));
    }

    public String button(String name, String value, String text) {
            return "<button " + (isReadOnly() ? "DISABLED" : "") + " class=\"button\" name=\"" + name + "\" value=\"" + value + "\">" + text + "</button>";
    }

    public String deleteButton(Locale locale) {
            return confirmButton(locale, "DELETE", "DELETE_MESSAGE");
    }

    public String deleteButton(Locale locale, String confirm) {
        return confirmButton(locale, "DELETE", confirm);
    }

    public String confirmButton(Locale l, String text, String confirm) {
            return "<button " + (isReadOnly() ? "DISABLED" : "") + "  class=\"button\" name=\"SUBMIT\" value=\"" + text + "\""
            + " onclick=\"javascript:if (confirm('" + Message.get(l, confirm) + "')) return true; else return false; \">"
            + Message.get(l,text) + "</button>";
    }

    public String resetButton(String n, String v) {
            return "<input " + (isReadOnly() ? "DISABLED" : "") + "  type=\"RESET\" name=\"" + n + "\" value=\"" + v + "\">";
    }

    public static String line() {
            return line(0);
    }

    public static String line(int size) {
            return "<hr size=\"" + size + "\">";
    }

    public static String bulletList(String s) {
            return "<ul>" + s + "</ul>";
    }

    public static String numberList(String s) {
            return "<ol>" + s + "</ol>";
    }

    public static String listItem(String s) {
            return "<li>" + s + "</li>";
    }

    /* Links */
    public static String anchor(String name) {
            return "<a id=\""+name+"\" name=\"" + name + "\"></a>\n";
    }
    public static String anchor(String name, String desc) {
            return "<a name=\"" + name + "\">" + desc + "</a>\n";
    }

    public static String link(String ref, String desc) {
            return "<a href=\"" + ref + "\">" + desc + "</a>\n";
    }

    public static String linkNewWindow(String ref, String desc) {
            return "<a target=\"_blank\" href=\"" + ref + "\">" + desc + "</a>\n";
    }

    public static String linkWithTip(String ref, String desc, String tooltip) {
            return "<a href=\"" + ref + "\" title=\""+tooltip+"\">" + desc + "</a>\n";
    }

    public static String linkNewWindowWithTip(String ref, String desc, String tooltip) {
            return "<a target=\"_blank\" href=\"" + ref + "\" title=\""+tooltip+"\">" + desc + "</a>\n";
    }

    public static String link(String ref, String desc, String target) {
            return "<a href=\"" + ref + "\" target=\"" + target + "\">" + desc + "</a>\n";
    }

    public static String actionLink(String ref, String desc, String onClick) {
            return "<a href=\"" + ref + "\" OnClick=\"" + onClick + "\">" + desc + "</a>\n";
    }

    public static String actionLink(String ref, String desc, String onClick, String target) {
            return "<a href=\"" + ref + "\" target=\"" + target + "\" OnClick=\"" + onClick + "\">" + desc + "</a>\n";
    }

    public static String mailLink(String recip, String subject, String body, String desc) throws UnsupportedEncodingException {
            return "<a href=\"mailto:" + recip + "?subject=" + URLEncoder.encode(subject, CHARACTER_ENCODING).replace('+', ' ')
                            + "&body=" + URLEncoder.encode(body, CHARACTER_ENCODING).replace('+', ' ') + "\">" + desc + "</a>\n";
    }

    public static String mailLink(String recip, String subject, String body, String onClick, String desc)
                    throws UnsupportedEncodingException {
            return "<a href=\"mailto:" + recip + "?subject=" + URLEncoder.encode(subject, CHARACTER_ENCODING).replace('+', ' ')
                            + "&body=" + URLEncoder.encode(body, CHARACTER_ENCODING).replace('+', ' ') + "\" onClick=\"" + onClick + "\">"
                            + desc + "</a>\n";
    }

    public String fileInput(String name) {
            return "<input type=\"FILE\" " + (isReadOnly() ? "DISABLED" : "") + "  name=\"" + name + "\">";
    }

    public static String getDateControlScript(Locale locale) {
//		System.out.println("Getting date control script for locale "+locale.getLanguage());
//              TODO: May need more intelligence here to ensure the locale has a file for JS Calendar ( or just replace the whole thing)
        return 
           "<link rel=\"stylesheet\" type=\"text/css\" href=\"../js/jscalendar-1.0/calendar-"+DATE_CONTROL_STYLE+".css\" title=\"Date Control\" />\n"
          +"<script type=\"text/javascript\" src=\"../js/jscalendar-1.0/calendar.js\"></script>\n"
          +"<script type=\"text/javascript\" src=\"../js/jscalendar-1.0/lang/calendar-"+locale.getLanguage()+".js\"></script>\n"
          +"<script type=\"text/javascript\" src=\"../js/jscalendar-1.0/calendar-setup.js\"></script>\n";
    }

    public static String getColorControlScript() {
            return "<script  type='text/javascript' src=\"../js/jscolor/jscolor.js\"></script>\n";
    }

    public static String EDITOR_THEME = "night";

    public static String getCodeEditorScript() {
        return "<link rel=\"stylesheet\" type=\"text/css\" href=\"../js/codemirror/lib/codemirror.css\" />\n"
            +"<link rel=\"stylesheet\" type=\"text/css\" href=\"../js/codemirror/theme/"+EDITOR_THEME+".css\" />\n"
            +"<link rel=\"stylesheet\" type=\"text/css\" href=\"../js/codemirror/addon/hint/show-hint.css\" />\n"
            +"<link rel=\"stylesheet\" type=\"text/css\" href=\"../js/codemirror/addon/dialog/dialog.css\" />\n"
            +"<link rel=\"stylesheet\" type=\"text/css\" href=\"../js/codemirror/addon/tern/tern.css\" />\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/lib/codemirror.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/mode/javascript/javascript.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/mode/css/css.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/addon/dialog/dialog.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/addon/tern/tern.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/addon/hint/show-hint.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/addon/hint/javascript-hint.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/addon/hint/css-hint.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/addon/lint/lint.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/addon/lint/javascript-lint.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/addon/lint/css-lint.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/addon/selection/active-line.js\"></script>\n"
            + "<script type=\"text/javascript\" src=\"../js/codemirror/addon/edit/matchbrackets.js\"></script>\n";
    }

    public String getCodeEditorControl(String formName, String controlName, String initialValue, String mode) {
        return "<textarea id=\""+controlName+"\" name=\""+controlName+"\">"+(initialValue==null ? "" : initialValue)+"</textarea>\n"
            +" <script>\n"
            + "var "+controlName+"Editor = CodeMirror.fromTextArea(document.getElementById(\""+controlName+"\")"
            + ", { lineNumbers: true, mode: \""+mode+"\""
                            + ", theme: \""+EDITOR_THEME+"\", matchBrackets: true, extraKeys: {\"Ctrl-Space\": \"autocomplete\"}"
                            + ", viewportMargin: Infinity });\n"
            + "</script>\n";				
    }

    public int countLines(String string) {
            return java.util.regex.Pattern.compile("[\\n]+").split(string.trim()).length;
    }

    public static String getSortTableScript() {
            return "<script src=\"../js/sorttable.js\"></script>\n";
    }

    public static String getScript(String name) {
            return "<script src=\"../js/"+name+"\"></script>\n";
    }

    public static String makeScript(String script) {
            return "<script>"+script+"</script>\n";
    }

    public String getColorControl(String formName, String controlName, String initialValue) {
            return "<input name='"+controlName+"' class='color' value='"+initialValue+"'>";
    }

    int dateControlCount = 0;

    public String getDateControl(String formName, String controlName, String initialValue) {
        dateControlCount++;
        String varName = "dateControl" + dateControlCount;
        return "<input type=\"text\" name=\""+controlName+"\" id=\""+varName+"\" value=\""+initialValue+"\" /></td>\n"
            +"<td><img src=\"/js/jscalendar-1.0/img.gif\" id=\""+varName+"_TRIG"+"\" style=\"cursor: pointer; z-index: 1000;\" title=\"Date selector\"\n"
            +" onmouseover=\"this.style.background='red';\" onmouseout=\"this.style.background=''\" />\n"
            +"<script type=\"text/javascript\">\n"
            +"Calendar.setup({\n"
            +" inputField : \""+varName+"\",\n"
            +" ifFormat   : \""+DATE_CONTROL_FORMAT+"\",\n"
            +" button     : \""+varName+"_TRIG"+"\",\n"
            +(initialValue==null ? "" : " date : new Date(\""+initialValue+"\"),\n")
            //+" singleClick : true\n"
            +"});\n"
            +"</script>\n";
    }

    public String getDateTimeControl(String formName, String controlName, String initialValue) {
        dateControlCount++;
        String varName = "dateControl" + dateControlCount;
        return "<input type=\"text\" name=\""+controlName+"\" id=\""+varName+"\" value=\""+initialValue+"\" />\n"
            +"<img src=\"/js/jscalendar-1.0/img.gif\" id=\""+varName+"_TRIG"+"\" style=\"cursor: pointer; z-index: 1000;\" title=\"Date selector\"\n"
            +" onmouseover=\"this.style.background='red';\" onmouseout=\"this.style.background=''\" />\n"
            +"<script type=\"text/javascript\">\n"
            +"Calendar.setup({\n"
            +" inputField : \""+varName+"\"\n"
            +" ,ifFormat   : \""+DATE_CONTROL_FORMAT+" "+TIME_CONTROL_FORMAT+"\"\n"
            +" ,showsTime   : true\n"
            +" ,button     : \""+varName+"_TRIG"+"\"\n"
            //+" singleClick : true\n"
            +(initialValue==null ? "" : ", date : new Date(\""+initialValue+"\")\n")
            +"});\n"
            +"</script>\n";
    }

    public static String multiSelectList(String name, List<String> names, List<String> values, List<String> tooltips, Locale l) {
    	StringBuilder sb = new StringBuilder(1024);
    	sb.append("<SELECT NAME=\""+name+"\" SIZE=\""+names.size()+"\" MULTIPLE>\n");
    	for(int i=0; i < names.size();i++) {
    	    sb.append("<OPTION TITLE=\"" + tooltips.get(i) + "\" VALUE=\""+(String)values.get(i)+"\">"+(String)names.get(i)+"</OPTION>\n");
    	}
    	sb.append("</SELECT>\n");
    	return sb.toString();
    }

    /** Build a list of checkboxes based on a query  */
    public static String multiCheckboxList(String name, QueryResult qr, Locale l, Set<ODocument> picked) {
        List<String> names = new ArrayList<>(qr.size());
        List<String> values = new ArrayList<>(qr.size());
        List<String> tooltips = new ArrayList<>(qr.size());
        List<String> checks = new ArrayList<>(qr.size());
        for(ODocument row : qr.get()) {
            String rid = row.field("rid");
            if (rid == null) {
                rid = row.getIdentity().toString().substring(1);
            }
            values.add(rid);
            names.add((String)row.field("name"));
            checks.add((picked != null && picked.contains(row) ? "Y" : null));
        }
        return multiCheckboxList(name, names, values, tooltips, checks, l);
    }

    public static String multiCheckboxListWithGoto(String name, String table, QueryResult qr, Locale l, Set<ODocument> picked) {
	    List<String> names = new ArrayList<>(qr.size());
	    List<String> values = new ArrayList<>(qr.size());
	    List<String> tooltips = new ArrayList<>(qr.size());
	    List<String> checks = new ArrayList<>(qr.size());
	    for(ODocument row : qr.get()) {
	    	String rid = row.field("rid");
	    	if (rid == null) {
	    		rid = row.getIdentity().toString().substring(1);
	    	}
	    	values.add(rid);
	    	names.add((String)row.field("name") + "&nbsp;&nbsp;&nbsp;"+linkNewWindow("/permeagility.web.Table"
					+"?TABLENAME="+table
					+"&EDIT_ID="+rid, Message.get(l, "GOTO_ROW")));
	    	tooltips.add((String)row.field("tooltip"));
	    	checks.add((picked != null && picked.contains(row) ? "Y" : null));
	    }
	    return multiCheckboxList(name, names, values, tooltips, checks, l);
    }

    public static String multiCheckboxList(String name, List<String> names, List<String> values, List<String> tooltips, List<String> checks, Locale l) { 
    	StringBuilder sb = new StringBuilder(1024);
    	for(int i=0; i < names.size();i++) {
    	    sb.append("<input type=\"CHECKBOX\""
                +(checks.get(i)==null ? "" : " chacked=\"yes"+"\"")
                +" name=\""+name+"\""
                +" title=\""+tooltips.get(i)+"\""
                +" value=\""+(String)values.get(i)+"\">"
                +(String)names.get(i)
                +"</input><BR>\n"
    	    );
    	}
    	return sb.toString();
    }

    public static String multiCheckboxList(String name, List<String> names, List<String> values, List<String> tooltips, Locale l) {
    	StringBuilder sb = new StringBuilder(1024);
    	for(int i=0; i < names.size();i++) {
    	    sb.append("<input type=\"CHECKBOX\" name=\""+name+"\" title=\""+tooltips.get(i)+"\" value=\""+(String)values.get(i)+"\">"+(String)names.get(i)+"</input><BR>\n");
    	}
    	return sb.toString();
    }

    public String linkSetControl(DatabaseConnection con, String name, String table, QueryResult qr, Locale l, Set<ODocument> picked) {
        List<String> names = new ArrayList<>(qr.size());
        List<String> values = new ArrayList<>(qr.size());
        List<String> tooltips = new ArrayList<>(qr.size());
        List<String> checks = new ArrayList<>(qr.size());
        for(ODocument row : qr.get()) {
            String rid = row.field("rid");
            if (rid == null) {
                rid = row.getIdentity().toString();
            }
            if (rid.startsWith("#")) rid = rid.substring(1);
            //System.out.println("adding rid "+rid);
            values.add(rid);
            names.add(toJSONString(getDescriptionFromDocument(con, row)));
            tooltips.add(toJSONString((String)row.field("tooltip")));
            boolean pick = false;
            if (picked != null) { // Find in the list of picked, hope it isn't long
                for (Object p : picked) {
                    ORID id = null;
                    if (p == null) {

                    } else if (p instanceof ORecordId) {
                            id = ((ORecordId)p).getIdentity();
                    } else {  // Assume ODocument
                            id = ((ODocument)p).getIdentity();
                    }
                    if (id != null && id.toString().substring(1).equals(rid)) {
                            pick = true;
                    }
                }
            }
            checks.add((pick ? "true" : "false"));
        }
        return getLinkSet(name, table, names, values, tooltips, checks, l);
    }
    
    public String getLinkSet(String name, String table, List<String> names, List<String> values, List<String> tooltips, List<String> checks, Locale l) {   
        StringBuilder result = new StringBuilder();
        result.append("<div ng-controller=\"LinkSetControl\" ng-init=\"values=[\n");
        for (int i=0; i<names.size(); i++) {
                if (i > 0) { result.append(","); }
                result.append("{ name: '"+names.get(i)+"', rid: '"+values.get(i)+"', active:"+checks.get(i)+" }\n");
        }
        result.append("]\">\n");
        result.append("<ul>\n");
        result.append("  <li ng-tooltip=\""+Message.get(l, "USE_CONTROLS_TO_CHANGE")+"\" ng-repeat=\"v in values | filter: { active: true }\">\n");
        result.append("    {{v.name}}&nbsp;&nbsp;&nbsp;\n");
        result.append("    <a title=\""+Message.get(l, "CLICK_TO_DELETE")+"\" ng-click=\"toggleActive(v)\">&times;</a>\n");
        result.append("    <a target=\"_blank\" HREF=\"permeagility.web.Table?TABLENAME="+table+"&EDIT_ID={{v.rid}}\">"+Message.get(l, "GOTO_ROW")+"</a>\n");
        result.append("  </li>\n");
        result.append("</ul>\n");
        result.append(Message.get(l,"ADD_OR_REMOVE")+"&nbsp;");
        result.append("  <select ng-model=\"selValue\" ng-options=\"v.name for v in values\" ng-change=\"toggleActive(selValue)\">\n");
        result.append("    <option value=\"\">"+Message.get(l, "OPTION_NONE")+"</option>\n");
        result.append("      </select>\n");
        result.append("<input class=\"text\" type=\"hidden\" name=\""+name+"\"  value=\"{{resultList()}}\"/>\n");  // TYPE=\"hidden\"
        result.append("</div>\n");
  	return result.toString();
  }

    public String linkListControl(DatabaseConnection con, String name, String table, QueryResult qr, Locale l, List<ODocument> picked) {
        if (qr == null) {
                return paragraph("error","Cannot produce list for table "+table+" query is empty");
        }
        HashMap<String,Integer> listMap = new HashMap<>();  // for keeping counts of objects LinkList can have duplicates
        List<String> names = new ArrayList<>(qr.size());
        List<String> values = new ArrayList<>(qr.size());
        List<String> tooltips = new ArrayList<>(qr.size());
        List<String> checks = new ArrayList<>(qr.size());
        List<String> listnames = new ArrayList<>(qr.size());
        List<String> listvalues = new ArrayList<>(qr.size());
        List<String> listtooltips = new ArrayList<>(qr.size());
        List<String> listchecks = new ArrayList<>(qr.size());
        if (picked != null) {
            for(ODocument pick : picked) {
                if (pick != null) {
                    String rid = pick.field("rid");
                    if (rid == null) {
                            rid = pick.getIdentity().toString();
                    }
                    if (rid.startsWith("#")) rid = rid.substring(1);
                    listvalues.add(rid);
                    listnames.add(toJSONString(getDescriptionFromDocument(con, pick)));
                    listtooltips.add(toJSONString((String)pick.field("tooltip")));
                    Integer active = listMap.get(rid);
                    if (active == null) {
                            active = new Integer(1);
                    } else {
                            active = new Integer(active.intValue()+1);
                    }
                    //System.out.println("Adding to listValues: "+rid+" active="+active);
                    listMap.put(rid, active);	    	
                    listchecks.add(active.toString());
                }
            }
        }
        for(ODocument row : qr.get()) {
            String rid = row.field("rid");
            if (rid == null) {
                    rid = row.getIdentity().toString();
            }
            if (rid.startsWith("#")) rid = rid.substring(1);
            values.add(rid);
            names.add(toJSONString((String)row.field("name")));
            tooltips.add(toJSONString((String)row.field("tooltip")));
            Integer active = listMap.get(rid);
            if (active == null) {
                    active = new Integer(0);
            } else {
                    active = new Integer(active.intValue());
            }
            checks.add(active.toString());
        }
        return getLinkList(name, table, names, values, tooltips, checks, listnames, listvalues, listtooltips, listchecks, l);
    }

    public String getLinkList(String name, String table, List<String> names, List<String> values, List<String> tooltips, List<String> checks, List<String> listnames, List<String> listvalues, List<String> listtooltips, List<String> listchecks, Locale l) {   
        StringBuilder result = new StringBuilder();
        result.append("<div ng-controller=\"LinkListControl\" ng-init=\"values=[\n");
        for (int i=0; i<names.size(); i++) {
                if (i > 0) { result.append(","); }
                result.append("{ name: '"+names.get(i)+"', rid: '"+values.get(i)+"', active:"+checks.get(i)+" }\n");
        }
        result.append("];\n listValues=[");
        for (int i=0; i<listnames.size(); i++) {
                if (i > 0) { result.append(","); }
                result.append("{ name: '"+listnames.get(i)+"', rid: '"+listvalues.get(i)+"', active:"+listchecks.get(i)+" }\n");
        }
        result.append("];\">\n");
        result.append("<ol>\n");
        result.append("  <li ng-tooltip=\""+Message.get(l, "USE_CONTROLS_TO_CHANGE")+"\" ng-repeat=\"v in listValues\">\n");
        result.append("    <a title=\""+Message.get(l, "CLICK_TO_MOVE_UP")+"\" ng-click=\"up(v)\">&#x2191;</a>\n");
        result.append("    <a title=\""+Message.get(l, "CLICK_TO_MOVE_DOWN")+"\" ng-click=\"down(v)\">&#x2193;</a>\n");
        result.append("    {{v.name}}&nbsp;&nbsp;&nbsp;\n");
        result.append("    <a title=\""+Message.get(l, "CLICK_TO_DELETE")+"\" ng-click=\"delete(v)\">&times;</a>\n");
        result.append("    <a target=\"_blank\" HREF=\"permeagility.web.Table?TABLENAME="+table+"&EDIT_ID={{v.rid}}\">"+Message.get(l, "GOTO_ROW")+"</a>\n");
        result.append("  </li>\n");
        result.append("</ol>\n");
        result.append(Message.get(l, "ADD_ITEM")+"&nbsp;");
        result.append("  <select ng-model=\"selValue\" ng-options=\"v.name for v in values\" ng-change=\"selected(selValue)\">\n");
        result.append("    <option value=\"\">"+Message.get(l, "OPTION_NONE")+"</option>\n");
        result.append("      </select>\n");
        result.append("<input class=\"text\" type=\"hidden\" name=\""+name+"\"  value=\"{{resultList()}}\"/>\n");  // TYPE=\"hidden\"
        //          result.append("<INPUT CLASS=\"text\" NAME=\""+name+"\"  VALUE=\"{{resultList()}}\"/>\n");   // For debugging purposes
        result.append("</div>\n");
        return result.toString();
    }

    public String linkMapControl(DatabaseConnection con, String name, String table, QueryResult qr, Locale l, Map<String,ODocument> picked) {
        HashMap<String,Integer> listMap = new HashMap<>();  // for keeping counts of objects LinkList can have duplicates
        List<String> names = new ArrayList<>(qr.size());
        List<String> values = new ArrayList<>(qr.size());
        List<String> tooltips = new ArrayList<>(qr.size());
        List<String> checks = new ArrayList<>(qr.size());
        List<String> listmaps = new ArrayList<>(qr.size());
        List<String> listnames = new ArrayList<>(qr.size());
        List<String> listvalues = new ArrayList<>(qr.size());
        List<String> listtooltips = new ArrayList<>(qr.size());
        List<String> listchecks = new ArrayList<>(qr.size());
        if (picked != null) {
            for (String key : picked.keySet()) {
                ODocument pick = picked.get(key);
                if (pick != null) {
                    String rid = pick.field("rid");
                    if (rid == null) {
                        rid = pick.getIdentity().toString();
                    }
                    if (rid.startsWith("#")) rid = rid.substring(1);
                    listmaps.add(key);
                    listvalues.add(rid);
                    listnames.add(toJSONString(getDescriptionFromDocument(con, pick)));
                    listtooltips.add(toJSONString((String)pick.field("tooltip")));
                    Integer active = listMap.get(rid);
                    if (active == null) {
                        active = new Integer(1);
                    } else {
                        active = new Integer(active.intValue()+1);
                    }
                    //System.out.println("Adding to listValues: "+rid+" active="+active);
                    listMap.put(rid, active);	    	
                    listchecks.add(active.toString());
                }
            }
        }
        for(ODocument row : qr.get()) {
            String rid = row.field("rid");
            if (rid == null) {
                    rid = row.getIdentity().toString();
            }
            if (rid.startsWith("#")) rid = rid.substring(1);
            values.add(rid);
            names.add(toJSONString((String)row.field("name")));
            tooltips.add(toJSONString((String)row.field("tooltip")));
            Integer active = listMap.get(rid);
            if (active == null) {
                    active = new Integer(0);
            } else {
                    active = new Integer(active.intValue());
            }
            checks.add(active.toString());
        }
        return getLinkMap(name, table, names, values, tooltips, checks, listmaps, listnames, listvalues, listtooltips, listchecks, l);
    }

    public String getLinkMap(String name, String table, List<String> names, List<String> values, List<String> tooltips, List<String> checks, List<String> listmaps, List<String> listnames, List<String> listvalues, List<String> listtooltips, List<String> listchecks, Locale l) {   
        StringBuilder result = new StringBuilder();
        result.append("<div ng-controller=\"LinkMapControl\" ng-init=\"values=[\n");
        for (int i=0; i<names.size(); i++) {
                if (i > 0) { result.append(","); }
                result.append("{ name: '"+names.get(i)+"', rid: '"+values.get(i)+"', active:"+checks.get(i)+" }\n");
        }
        result.append("];\n listValues=[");
        for (int i=0; i<listnames.size(); i++) {
                if (i > 0) { result.append(","); }
                result.append("{ name: '"+listnames.get(i)+"', rid: '"+listvalues.get(i)+"', map:'"+listmaps.get(i)+"', active:"+listchecks.get(i)+" }\n");
        }
        result.append("];\">\n");
        result.append(" <ol>\n");
        result.append("  <li ng-tooltip=\""+Message.get(l, "USE_CONTROLS_TO_CHANGE")+"\" ng-repeat=\"v in listValues\">\n");
        result.append("<a title=\""+Message.get(l, "CLICK_TO_MOVE_UP")+"\" ng-click=\"up(v)\">&#x2191;</a>&nbsp;");
        result.append("<a title=\""+Message.get(l, "CLICK_TO_MOVE_DOWN")+"\" ng-click=\"down(v)\">&#x2193;</a>&nbsp;");
        result.append("<input class=\"text\" name=\"map\" ng-model=\"v.map\" SIZE=20  VALUE=\"{{v.map}}\"/>&nbsp;");
        result.append("{{v.name}}&nbsp;&nbsp;&nbsp;");
        result.append("  <a title=\""+Message.get(l, "CLICK_TO_DELETE")+"\" ng-click=\"delete(v)\">&times;</a>\n");
        result.append("  <a target=\"_blank\" HREF=\"permeagility.web.Table?TABLENAME="+table+"&EDIT_ID={{v.rid}}\">"+Message.get(l, "GOTO_ROW")+"</a>\n");
        result.append("  </li>\n");
        result.append(" </ol>\n");
        result.append(Message.get(l, "ADD_ITEM")+"&nbsp;");
        result.append("  <select ng-model=\"selValue\" ng-options=\"v.name for v in values\" ng-change=\"selected(selValue)\">\n");
        result.append("    <option value=\"\">"+Message.get(l, "OPTION_NONE")+"</option>\n");
        result.append("  </select>\n");
        result.append("<input class=\"text\" type=\"hidden\" name=\""+name+"\" value=\"{{resultList()}}\"/>\n");  // TYPE=\"hidden\"
//		result.append("<INPUT CLASS=\"text\" NAME=\""+name+"\"  VALUE=\"{{resultList()}}\"/>\n"); 
        result.append("</div>\n");
        return result.toString();
    }

    public static String createListFromCache(String name, String initial, DatabaseConnection con, String query) {
        return createListFromCache(name, initial, con, query, null, true, null, true);
    }

    public static String createListFromCache(String name, String initial, DatabaseConnection con, String query
                    , String attributes, boolean allowNull, String classname, boolean enabled) {
        QueryResult qr = queryCache.getResult(con, query);
        StringBuilder sb = new StringBuilder(1024);
        sb.append("<SELECT " + (enabled ? "" : "DISABLED") + (classname != null ? " CLASS=\"" + classname + "\"" : "") + " NAME=\""
                        + name + "\" " + (attributes != null ? attributes : "") + ">\n");
        if (initial == null && allowNull) {
            sb.append("<OPTION SELECTED VALUE=null>" + "Select" + "\n");
        } else if (allowNull) {
            sb.append("<OPTION VALUE=null>"+Message.get(con.getLocale(), "OPTION_NONE")+"\n");
        }
        if (qr != null) {
            for (ODocument item : qr.get()) {
                String id = item.getIdentity().toString();
                if (item.field("rid") != null) {
                    String d = item.field("rid");
                    if (d != null) {
                        id = d;
                    }
                }
            if (id.startsWith("#")) id = id.substring(1);
                String itemname = null;
                itemname = item.field("name");
                if (itemname == null) {
                    itemname = item.field("Name");					
                }
                if (itemname == null && item.fields()>0) {
                    itemname = item.field(item.fieldNames()[1]).toString();
                }
                sb.append("<OPTION ");
                if (initial != null && initial.equals(id)) {
                    sb.append("SELECTED ");
                }
                sb.append(" VALUE=\"");
                sb.append(id);
                sb.append("\">");
                sb.append(itemname == null ? id : itemname);
                sb.append("\n");
            }
        }
        sb.append("</SELECT>\n");
        return sb.toString();
    }

    public static String getQueryForTable(DatabaseConnection con, String table) {
            String query = "SELECT FROM "+table;
            QueryResult lists = getCache().getResult(con, "SELECT tablename, query FROM "+Setup.TABLE_PICKLIST+" WHERE tablename='"+table+"'");
            if (lists != null && lists.size()>0) {
                    return lists.getStringValue(0, "query");
            }
            return query;
    }

    public static String createListFromTable(String name, String initial, DatabaseConnection con, String table, String onChange,
                    boolean allowNull, String classname, boolean enabled) {
            return createListFromCache(name, initial, con, getQueryForTable(con,table),onChange, allowNull, classname, enabled);
    }

    /** Prepare a string value for insertion into a JSON document (convert \ to \\ and ' to \') */
    public static String toJSONString(String text) {
            return text==null ? "" : text.replace("\\","\\\\").replace("'","\\'");
    }

    public static String getDescriptionFromDocument(DatabaseConnection con, ODocument document) {
        if (document == null) {
            return NONE_STRING;
        } else if (document.getClassName() == null) {
            String name = document.field("name");
            if (name != null) {
                    return name;
            } else {
                    return NONE_STRING;
            }
        } else {
            //System.out.println("document="+document.getIdentity()+" class="+document.getClassName());
            return getDescriptionFromTable(con, document.getClassName(), document.getIdentity().toString());
        }
    }

    public static String getDescriptionFromTable(DatabaseConnection con, String table, String id) {
        //System.out.println("GetDescriptionFromTable table="+table+" id="+id);
        if (id == null || id.equals("")) return NONE_STRING;
        //System.out.println(getQueryForTable(con, table));
        if (!id.startsWith("#")) id = "#"+id;
        QueryResult qr = getCache().getResult(con, getQueryForTable(con, table));
        if (qr != null) {
            int r = qr.findFirstRow("rid", id);
            if (r > -1) {
                    return qr.getStringValue(r, "name");
            } else {
                    return id+" not in "+table;
            }
        } else {
            return NONE_STRING;
        }
    }

    public static String createListFromTable(String name, String initial, DatabaseConnection con, String table) {
        return createListFromTable(name, initial, con, table, null, true, null, true);
    }

    public static String createList(Locale locale, String name, String initial, List<String> names, String attributes, boolean allowNull, String classname, boolean enabled) {
        StringBuilder sb = new StringBuilder(1024);
        sb.append("<SELECT " 
            + (enabled ? "" : "DISABLED") 
            + (classname != null ? " CLASS=\"" + classname + "\"" : "") 
            + " NAME=\"" + name + "\" " 
            + (attributes != null ? attributes : "") + ">\n");
        if (initial == null && allowNull) {
            sb.append("<OPTION SELECTED VALUE=null>" + "Select" + "\n");
        } else if (allowNull) {
            sb.append("<OPTION VALUE=null>" + Message.get(locale,"OPTION_NONE"));
        }
        if (names != null) {
            for (String item : names) {
                sb.append("<OPTION ");
                if (initial != null && item.equals(initial)) {
                    sb.append("SELECTED ");
                }
                sb.append(">");
                sb.append(item);
            }
        }
        sb.append("</SELECT>\n");
        return sb.toString();
    }

    public static String selectList(Locale l, String name, String selected, List<String> names, List<String> values, String attributes, boolean allowNull, String classname, boolean enabled) {
            StringBuilder sb = new StringBuilder(1024);
            sb.append("<select " 
                            + (enabled ? "" : "DISABLED") 
                            + (classname != null ? " class=\"" + classname + "\"" : "") 
                            + " name=\"" + name + "\" " 
                            + (attributes != null ? attributes : "") + ">\n");
            if (allowNull) {
                    sb.append("<option value=null>" + Message.get(l,"OPTION_NONE")+"</option>");
            }
            for (int i = 0; i < names.size(); i++) {
                    if (selected != null && values.get(i).equals(selected)) {
                            sb.append("<option SELECTED value=\"" + values.get(i) + "\">" + names.get(i) + "</option>\n");
                    } else {
                            sb.append("<option value=\"" + values.get(i) + "\">" + names.get(i) + "</option>\n");
                    }
            }
            sb.append("</select>\n");
            return sb.toString();
    }

    public String getStyles() {
            if (internal_con != null && internal_con.isConnected()) {
                    QueryResult qr = queryCache.getResult(internal_con, "SELECT CSSStyle FROM style WHERE name='"+ DEFAULT_STYLE + "'");
                    if (qr != null && qr.size() > 0) {
                            String style =  qr.getStringValue(0, "CSSStyle");
                            if (style == null || style.equals("")) {
                                    System.out.println("***Weblet.getStyles()*** Unable to find style "+DEFAULT_STYLE+" in CSSStyle column of style table");
                                    return Setup.DEFAULT_STYLESHEET;
                            } else {
                                    return style;
                            }
                    }
                    System.out.println("***Weblet.getStyles()*** Unable to load style sheet called: "+DEFAULT_STYLE);
            } else {
                    System.out.println("***Weblet.getStyles()*** No database connection to use to retrieve stylesheets");
            }
            return Setup.DEFAULT_STYLESHEET;
    }

    public static boolean isNullOrBlank(String string) {
            if (string == null) {
                    return true;
            } else if (string.trim().equals("")) {
                    return true;
            } else {
                    return false;
            }
    }

    public static boolean valueChanged(Object oldObject, Object newObject) {
            if (oldObject == null && newObject != null) {
                    // System.out.println("New Value");
                    return true;
            } else if (oldObject != null && newObject != null) {
                    // System.out.println("old="+oldObject+" new="+newObject);
                    if (oldObject instanceof Number && newObject instanceof Number) {
                            if (((Number) oldObject).doubleValue() != ((Number) newObject).doubleValue()) {
                                    // System.out.println("NumberChanged!="+newObject);
                                    return true;
                            } else {
                                    return false;
                            }
                    } else if (!oldObject.equals(newObject)) {
                            // System.out.println(oldObject.getClass().getName()+"!="+newObject.getClass().getName());
                            return true;
                    }
            }
            return false;
    }

    public static BigDecimal roundDouble(double value, int precision) {
            try {
                    BigDecimal n = new BigDecimal(value);
                    return n.setScale(precision, BigDecimal.ROUND_HALF_UP);
            } catch (Exception e) {
                    return new BigDecimal(0.0);
            }
    }

    public static BigDecimal roundDouble(Number value, int precision) {
            return roundDouble(value.doubleValue(), precision);
    }

    // Localized number and date handling methods
    // ------------------------------------------

    /**
     * Format a number based on locale and return the formatted number as a
     * string
     */
    public static String formatNumber(Locale locale, Number n, String format) {
            if (locale == null || n == null) {
                    return "!"+n;
            }
            DecimalFormat numberFormat = new DecimalFormat(format);
            numberFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(locale));
            numberFormat.applyPattern(format);
            return numberFormat.format(n);
    }

    /**
     * Format a number based on locale and return the formatted number as a
     * string
     */
    public static String formatNumber(Locale locale, Number n, String format, int precision) {
            if (locale == null || n == null) {
                    return "!"+n;
            }
            DecimalFormat numberFormat = new DecimalFormat(format);
            numberFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(locale));
            numberFormat.applyPattern(format);
            return ((n.doubleValue() == 0.0 ? numberFormat.format(new Double(0.0)) : numberFormat.format(roundDouble(n.doubleValue(),precision))));
    }

    /**
     * Format a number based on locale and return the formatted number as a
     * string
     */
    public static String formatNumber(Locale locale, double n, String format) {
            if (locale == null) {
                    return "!"+n;
            }
            DecimalFormat numberFormat = new DecimalFormat(format);
            numberFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(locale));
            numberFormat.applyPattern(format);
            return numberFormat.format(n);
    }

    public static String formatNumber(Locale locale, double n, String format, int precision) {
            if (locale == null) {
                    return "!"+n;
            }
            DecimalFormat numberFormat = new DecimalFormat(format);
            numberFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(locale));
            numberFormat.applyPattern(format);
            return numberFormat.format(roundDouble(n, precision));

    }

    /**
     * Parse a string number based on locale and return the number
     */
    public static Number parseNumber(Locale locale, String s) {
            DecimalFormat numberFormat = new DecimalFormat();
            if (locale != null) {
                    numberFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(locale));
            }
            Number n = null;
            if (s != null) {
                    s = s.trim();
                    try {
                            n = numberFormat.parse(s);
                    } catch (Exception e) {}
            }
            return n;
    }

    /** Format a date based on locale and return the formatted date as a string */
    public static String formatDate(Locale locale, Date dateToFormat) {
        return formatDate(locale, dateToFormat, DATE_FORMAT);
    }
    
    /** Format a date based on locale and return the formatted date as a string */
    public static String formatDatetime(Locale locale, Date dateToFormat) {
        return formatDate(locale, dateToFormat, DATE_FORMAT+" "+TIME_FORMAT);
    }
    
    /** Format a date based on locale and return the formatted date as a string */
    public static String formatDate(Locale locale, Date dateToFormat, String format) {
            if (dateToFormat == null) {
                    return "";
            }
            SimpleDateFormat dateTimeFormat = new SimpleDateFormat(format, locale);
            return dateTimeFormat.format(dateToFormat);
    }

    /** Parse a string date based on locale and return the date  */
    public static Date parseDate(Locale locale, String dayString, String format) {
        if (dayString == null) {
            return null;
        } else {
            try {
                SimpleDateFormat sdf = new SimpleDateFormat(format, locale);
                sdf.setLenient(false);
                return sdf.parse(dayString);
            } catch (ParseException pe) {
                System.out.println("Weblet: cannot parse date "+dayString);
                // pe.printStackTrace();
                return null;
            }
        }
    }

    /** Parse a string date based on locale and return the date  */
    public static Date parseDate(Locale locale, String dayString) {
        return parseDate(locale, dayString, DATE_FORMAT);
    }

    /** Parse a string datetime based on locale and return the date   */
    public static Date parseDatetime(Locale locale, String dayString) {
        return parseDate(locale, dayString, DATE_FORMAT+" "+TIME_FORMAT);
    }

    /** If an overridden version of this returns true, then the generated fields will be disabled */
    public boolean isReadOnly() {
        return false;
    }

    /** this is faster than Regex parsing */
    public String[] splitCSV(String input) {
            List<String> tokensList = new ArrayList<>();
            StringBuilder b = new StringBuilder();
            int itemCount = 0;
            Stack<Character> quotes = new Stack<>(); 
            for (char c : input.toCharArray()) {
                switch (c) {
                        case ',':
                            if (!quotes.isEmpty()) {
                                b.append(c);
                            } else {
                                tokensList.add(b.toString());
                                itemCount++;
                                b = new StringBuilder();
                            }
                            break;
                        case '\"': case '\'':
                            if (c == '\'' && !quotes.empty() && quotes.peek().equals('\"')) { // Ignore single quotes inside double (apostrophe in data)
                            } else if (!quotes.empty() && quotes.peek().equals(c)) {
                                    quotes.pop(); // Coming out
                            } else {
                                    quotes.push(new Character(c)); // Going in
                            }
                        default:
                            b.append(c);
                        break;
                }
            }
            if (b.length()>0) {
                    tokensList.add(b.toString());
                    itemCount++;
            }
            //System.out.println("splitCSV turned "+input+" into "+tokensList);
            String[] temp = new String[itemCount];
            return tokensList.toArray(temp);
    }

    public static String wrapWithQuotes(String what) {
            if (what == null || what.equals("")) {
                    return "null";
            } else {
//			return '"'+what.replace("\"", "'")+'"';
                    return "'"+what.replace("\\","\\\\").replace("'", "\\'")+"'";
            }
    }

    /** Turn a "camelCase" into "Camel Case" */
    public static String makeCamelCasePretty(String input) {
            StringBuilder cn = new StringBuilder();
            if (input.startsWith("_")) input = input.substring(1);  // Remove possible leading underscore (_allowREAD)
            char[] chars = input.toCharArray();
            for (int i=0; i<chars.length; i++) {
                    if (i == 0) {
                            cn.append(Character.toUpperCase(chars[i]));
                    } else {
                            if (Character.isUpperCase(chars[i])) {
                                    if (i > 0 && Character.isLowerCase(chars[i-1])) {
                                            cn.append(' ');
                                    }
                                    if (i + 1 < chars.length && Character.isLowerCase(chars[i+1])) {
                                            cn.append(' ');
                                    }
                            }
                            cn.append(chars[i]);
                    }
            }
            return cn.toString();
    }

    /** Turn pretty and not so pretty text into a camelCase valid identifier 
     * ie. "Camel Case" becomes "camelCase" 
     * "first name" becomes "firstName" 
     * "User ID" becomes "userId" 
     * "USER_ID" becomes "userId" (Note: if all caps, will be turned to all lowercase)
     * "543-device-reading" becomes "n543DeviceReading"  */
    public static String makePrettyCamelCase(String input) {
        StringBuilder cn = new StringBuilder();
        input = input.trim();
        if (input.startsWith("_")) input = input.substring(1);  // Remove possible leading underscore (_allowREAD)
        char[] chars = input.toCharArray();

        // If the name is all uppercase (looking at you Oracle), then lowerCase it all before processing 
        // Underlines will cause camel casing to happen
        boolean isUpperCase = true;
        for (int i=0; i<chars.length; i++) {
            if (Character.isLowerCase(chars[i])) {
                isUpperCase = false;
            }
        }
        if (isUpperCase) {
            chars = input.toLowerCase().toCharArray();
        }

        for (int i=0; i<chars.length; i++) {
            if (i == 0 && Character.isUpperCase(chars[i])) {
                if (i<chars.length && !Character.isUpperCase(chars[i+1])) { // Will allow uppercase for first if Second is also upper (acronym)
                    chars[i] = Character.toLowerCase(chars[i]);
                }
            }				
            if (i == 0 && (chars[i] >= '0' && chars[i] <= '9')) {
                cn.append('n');					
            }
            if (chars[i] == '#') {
                cn.append("Num");
            } else if (chars[i] == '&') {
                cn.append("And");
            } else if (chars[i] == '_' || chars[i] == ' ' || chars[i] == '&' || chars[i] == '\''
                || chars[i] == '\\' || chars[i] == '/' || chars[i] == '.' || chars[i] == ','
                || chars[i] == '(' || chars[i] == ')' || chars[i] == '{' || chars[i] == '}'
                || chars[i] == '@' || chars[i] == '!' || chars[i] == '?' || chars[i] == '<' 
                || chars[i] == '>' || chars[i] == '+' || chars[i] == '-' || chars[i] == ';'  || chars[i] == ':'
                || chars[i] == '[' || chars[i] == ']' || chars[i] == '$' || chars[i] == '*') {  // Don't bring these
                if (i < chars.length - 1) {  // and ensure next is uppercase as long as we are not at the end
                        chars[i+1] = Character.toUpperCase(chars[i+1]);
                }
            } else {
                cn.append(chars[i]);
            }
        }
        return cn.toString();
    }

}
