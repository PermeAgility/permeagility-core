/* Copyright (c) 2012 PermeAgility Incorporated. 
This component and the accompanying materials are made available under the terms of the 
"Eclipse Public License v1.0" which accompanies this distribution, and is available
at the URL "http://www.eclipse.org/legal/epl-v10.html".
*/
package permeagility.web;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;

import permeagility.util.DatabaseConnection;
import permeagility.util.DatabaseSetup;
import permeagility.util.QueryCache;
import permeagility.util.QueryResult;

import com.orientechnologies.orient.core.record.impl.ODocument;

public abstract class Weblet {

	public static final String CHARACTER_ENCODING = "utf-8";
	public static final Charset charset = Charset.forName("UTF-8");

	// These values can be overridden using the constant override - use permeagility.web.Context as this class is abstract
	public static int START_HOUR = 0;
	public static boolean TOP_OF_DAY = true;
	public static boolean INCLUSIVE_END_DAY = true;
	public static String INT_FORMAT = "#,##0";
	public static String FLOAT_FORMAT = "#,##0.00";
	public static String DATE_FORMAT = "yyyy-MM-dd";
	public static String TIME_FORMAT = "hh:mm:ss";
	public static String DECIMAL_FORMAT = "#,##0;(#,##0)";
	public static String DATE_CONTROL_FORMAT = "%Y-%m-%d";
	public static String TIME_CONTROL_FORMAT = "%k:%M:%S";
	public static String DEFAULT_STYLE = "default";
    public static String POPUP_SUFFIX = "..";

	public static DateFormat sqlDateFormat = new SimpleDateFormat("yyyy-MM-dd");
	public static DateFormat sqlDatetimeFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
	static QueryCache queryCache = new QueryCache();  // protected so that server can refresh it

	public Weblet() {}
	
	public static QueryCache getCache() {
		return queryCache;
	}
	
	private DatabaseConnection internal_con;

	protected byte[] doPage(DatabaseConnection con, HashMap<String, String> parms) {
		internal_con = con; // For style retrieval
		StringBuffer response = new StringBuffer();
		response.append("<html>\n");
		response.append(getPage(con, parms));
		response.append("</html>\n");
		return response.toString().getBytes(charset);
	}

	public abstract String getPage(DatabaseConnection con, java.util.HashMap<String, String> parms);

	public String head(String s) { return head(s, ""); }
	
	public String head(String s, String script) {
		return "<head>\n" + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset="+CHARACTER_ENCODING+"\">\n"
				+ "<meta http-equiv=\"Pragma\" content=\"no-cache\">\n" + "<meta http-equiv=\"Expires\" content=\"-1\">\n"
				+ "<meta http-equiv=\"Cache-Control\" content=\"no-cache\">\n"
				+ "<meta name=\"GENERATOR\" content=\"HTML Document generated by PermeAgility\">\n" + "<title>" + s + "</title>\n"
				+ "<script type=\"text/javascript\" src=\"/js/jquery-1.11.1.min.js\"></script>\n"
				+ "<script type=\"text/javascript\" src=\"/js/angular.min.js\"></script>\n"
				+ script + "\n" + "<style type=\"text/css\">\n" + getStyles() + "</style>\n" + "</head>\n";
	}

	public static String BODY_OPTIONS = "ng-app='permeagility'";
	public static String body(String s) { return "<body "+BODY_OPTIONS+">\n" + s + "</body>"; }
	public static String body(String c, String s) { return "<body "+BODY_OPTIONS+" class=\"" + c + "\">\n" + s + "</body>"; }
	public static String bodyOnLoad(String s, String l) { return "<body "+BODY_OPTIONS+" onLoad=\"" + l + "\">\n" + s + "</body>"; }

	public static String thumbnail(long id, String description) {
		//return "<a href=\"/thumbnail?SIZE=MEDIUM&ID="+id+"\" rel=\"prettyPhoto\" title=\""+description+"\"><img src=\"../thumbnail?ID="+id+"\" width=\"50\" height=\"50\" alt=\""+description+"\" /></a>";
		String but = "<button onClick=window.open('/thumbnail?SIZE=FULL&ID="+id+"')>View full size</button>";
		return "<a href=\"/thumbnail?SIZE=MEDIUM&ID="+id+"\" rel=\"prettyPhoto\" title=\""+description+but+"\"><img src=\"../thumbnail?ID="+id+"\" alt=\""+description+"\" /></a>";
	}
	
	public static String image(String s) { return "<img src=\"../images/" + s + "\">\n"; }
	public static String image(String c, String s) { return "<img class=\"" + c + "\" src=\"../images/" + s + "\">\n"; }

	public static String center(String s) { return "<center>\n" + s + "</center>\n"; }

	public static String h1(String s) { return "<h1>" + s + "</h1>"; }
	public static String h2(String s) { return "<h2>" + s + "</h2>"; }
	public static String h3(String s) { return "<h3>" + s + "</h3>"; }
	public static String h4(String s) { return "<h4>" + s + "</h4>"; }
	public static String h5(String s) { return "<h5>" + s + "</h5>"; }
	public static String h6(String s) { return "<h6>" + s + "</h6>"; }

	public static String paragraph(String s) { return "<p>" + s + "</p>"; }
	public static String paragraph(String c, String s) { return "<p class=\"" + c + "\">" + s + "</p>"; }
	public static String paragraphLeft(String c, String s) { return "<p align=\"left\" class=\"" + c + "\">" + s + "</p>"; }
	public static String paragraphLeft(String s) { return "<P ALIGN=\"LEFT\">" + (s == null ? "&nbsp;" : s) + "</P>"; }
	public static String paragraphRight(String s) { return "<P ALIGN=\"RIGHT\">" + (s == null ? "&nbsp;" : s) + "</P>"; }
	public static String paragraphCenter(String s) { return "<P ALIGN=\"CENTER\">" + (s == null ? "&nbsp;" : s) + "</P>"; }
	public static String alignRight(String s) { return "<P ALIGN=\"RIGHT\">" + (s == null ? "&nbsp;" : s); }
	public static String span(String id, String s) { return "<SPAN ID=\"" + id + "\">" + s + "</SPAN>"; }
	public static String spangular(String id, String s) { return "<SPAN ng-app=\"permeagility\" ID=\"" + id + "\">" + s + "</SPAN>"; }
	public static String div(String name, String contents) { return "<div id=\"" + name + "\">" + contents + "</div>"; }

	public static String fontSize(int size, String s) { return "<FONT SIZE=\"" + size + "\">" + (s == null ? "&nbsp;" : s) + "</FONT>"; }
	public static String xxSmall(String s) { return fontSize(1, s); }
	public static String xSmall(String s) { return fontSize(2, s); }
	public static String small(String s) { return fontSize(3, s); }
	public static String medium(String s) { return fontSize(4, s); }
	public static String large(String s) { return fontSize(5, s); }
	public static String xLarge(String s) { return fontSize(6, s); }
	public static String xxLarge(String s) { return fontSize(7, s); }
	
	public static String color(String c, String s) { return "<FONT COLOR=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</FONT>"; }

	public static String br() { return "<BR>"; }

	public static String bold(String s) { return "<B>" + (s == null ? "&nbsp;" : s) + "</B>"; }

	public static String table(String s) { return table(1, s); }

	public static String table(int border, String s) {
		return "<TABLE BORDER=\"" + border + "\" CELLPADDING=\"0\" CELLSPACING=\"2\" >" + s + "</TABLE>\n";
	}

	public static String table(String c, String s) {
		return "<TABLE CLASS=\"" + c + "\">" + s + "</TABLE>\n";
	}

	public static String tableStart(int border) {
		return "<TABLE BORDER=\"" + border + "\" CELLPADDING=\"0\" CELLSPACING=\"2\" >\n";
	}

	public static String tableStart(String c) {
		return "<TABLE CLASS=\"" + c + "\">\n";
	}

	public static String tableStart(String width, String c) {
		return "<TABLE WIDTH=\""+width+"\" CLASS=\"" + c + "\">\n";
	}

	public static String tableEnd() {
		return "</TABLE>\n";
	}

	public static String tableHead(String c, String s) {
		return "<TH CLASS=\"" + c + "\">" + s + "</TH>\n";
	}

	public static String tableHead(String s) {
		return "<TH>" + s + "</TH>\n";
	}

	public static String tableBody(String c, String s) {
		return "<TBODY CLASS=\"" + c + "\">" + s + "</TBODY>\n";
	}

	public static String tableBody(String s) {
		return "<TBODY>" + s + "</TBODY>\n";
	}

	public static String tableFoot(String c, String s) {
		return "<TFOOT CLASS=\"" + c + "\">" + s + "</TFOOT>\n";
	}

	public static String tableFoot(String s) {
		return "<TFOOT>" + s + "</TFOOT>\n";
	}

	public static String row(String c, String s) {
		return "<TR CLASS=\"" + c + "\">" + s + "</TR>\n";
	}

	public static String row(String s) {
		return "<TR VALIGN=\"top\">" + s + "</TR>\n";
	}

	public static String rowOnClick(String c, String s, String onClick) {
		return "<TR CLASS=\"" + c + "\" onClick=\"" + onClick + "\" title='Click to edit row'>" + (s == null ? "&nbsp;" : s)
				+ "</TR>\n";
	}

	public static String column(String s) {
		return "<TD>" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String column(String c, String s) {
		return "<TD CLASS=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String column(String c, int width, String s) {
		return "<TD CLASS=\"" + c + "\" WIDTH=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String column(String c, int width, String s, String title) {
		return "<TD CLASS=\"" + c + "\" WIDTH=\"" + width + "%\" TITLE=\""+ title +"\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String column(int width, String s) {
		return "<TD WIDTH=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnOnClick(int width, String s, String onClick) {
		return "<TD WIDTH=\"" + width + "%\" onClick=\"" + onClick + "\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnRight(int width, String s) {
		return "<TD ALIGN=\"RIGHT\" WIDTH=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnColor(int width, String color) {
		return "<TD BGCOLOR=\""+color+"\" WIDTH=\"" + width + "%\">" + (color == null ? "&nbsp;" : color) + "</TD>\n";
	}

	public static String columnRight(String c, int width, String s) {
		return "<TD ALIGN=\"RIGHT\" WIDTH=\"" + width + "%\" CLASS=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnTop(int width, String s) {
		return "<TD VALIGN=\"TOP\" WIDTH=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnTopRight(int width, String s) {
		return "<TD ALIGN=\"RIGHT\" VALIGN=\"TOP\" WIDTH=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnCenter(int width, String s) {
		return "<TD ALIGN=\"CENTER\" WIDTH=\"" + width + "%\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnSpan(int width, String s) {
		return "<TD COLSPAN=\"" + width + "\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnSpanRight(int width, String s) {
		return "<TD COLSPAN=\"" + width + "\" ALIGN=\"RIGHT\" >" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnSpan(String c, int width, String s) {
		return "<TD COLSPAN=\"" + width + "\" CLASS=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnNoWrap(String c, int width, String s) {
		return "<TD NOWRAP WIDTH=\"" + width + "%\" CLASS=\"" + c + "\">" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnNoWrap(int width, String s) {
		return "<TD NOWRAP WIDTH=\"" + width + "%\" >" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnTopNoWrap(int width, String s) {
		return "<TD VALIGN=\"TOP\" NOWRAP WIDTH=\"" + width + "%\" >" + (s == null ? "&nbsp;" : s) + "</TD>\n";
	}

	public static String columnSpanNoWrap(int span, String c, int width, String s) {
		return "<TD COLSPAN=\"" + span + "\"NOWRAP WIDTH=\"" + width + "%\" CLASS=\"" + c + "\">" + (s == null ? "&nbsp;" : s)
				+ "</TD>\n";
	}

	public static String form(String n, String action, String s) {
		return "<FORM NAME=\"" + n + "\" ACTION=\"" + action + "\" METHOD=\"POST\" ENCTYPE=\"application/x-www-form-urlencoded\">"
				+ s + "</FORM>\n";
	}

	public static String form(String n, String s) {
		return "<FORM NAME=\"" + n + "\" METHOD=\"POST\" ENCTYPE=\"application/x-www-form-urlencoded\">" + s + "</FORM>\n";
	}

	public static String form(String s) {
		return "<FORM METHOD=\"POST\" ENCTYPE=\"application/x-www-form-urlencoded\">" + s + "</FORM>\n";
	}

    public static String formStart(String n, String action) {
    	return "<FORM NAME=\""+n+"\" ACTION=\""+action+"\" METHOD=\"POST\" ENCTYPE=\"application/x-www-form-urlencoded\">\n";
    }
        
    public static String formEnd() {
    	return "</FORM>\n";
    }

    /*
     * Creates a link which will popup a form containing the content given as a parameter
     */
    public static String popupForm(String formName, String action, String linkText, String linkClass, String focusField, String content) {
		return "<a "+(linkClass!=null ? "class=\""+linkClass+"\"" : "")+" href=\"javascript:var%20f=document.getElementById('"+formName+"_DIV');%20f.style.display=(f.style.display=='block'?'none':'block');%20%20%20document.forms['"+formName+"']."+focusField+".focus();%20%20void%200;\">"+linkText+POPUP_SUFFIX+"</a>"
				+"<div id=\""+formName+"_DIV\" class=\"popup\" style=\"position: absolute; margin-top: -0.4em;\">"
				+"<form id=\""+formName+"\" name=\""+formName+"\" method=\"post\" ENCTYPE=\"multipart/form-data\" action=\""+(action!=null ? action : "#" )+"\" onsubmit=\"document.getElementById('"+formName+"_DIV').style.display='none'; return true;\" class=\"subtle small\" style=\"position: relative; left: 1em; top: 2px;\">"
//				+"<form id=\""+formName+"\" ng-app=\"permeagility\" ng-submit=\"$('"+formName+"').submit();\" name=\""+formName+"\" method=\"post\" ENCTYPE=\"multipart/form-data\""+(action!=null ? " action=\"/"+action+"\"" : "")+" onsubmit=\"document.getElementById('"+formName+"_DIV').style.display='none'; return true;\" class=\"subtle small\" style=\"position: relative; right: 1em; top: 2px;\">"
				+content
				+"</form></div>";
    }
/*
    public static String popupForm(String formName, String action, String linkText, String linkClass, String focusField, String content) {
		return "<a ng-click=\""+formName+"_SWITCH=!"+formName+"_SWITCH\" "+(linkClass!=null ? "class=\""+linkClass+"\"" : "")+" href=''>"+linkText+POPUP_SUFFIX+"</a>"
				+"<div ng-show=\"!"+formName+"_SWITCH\" class=\"popup\" style=\"position: absolute; margin-top: -0.4em;\">"
				+"<form id=\""+formName+"\" name=\""+formName+"\" method=\"post\" ENCTYPE=\"multipart/form-data\" action=\""+(action!=null ? action : "#" )+"\" "
				+" class=\"subtle small\" style=\"position: relative; left: 1em; top: 2px;\">"
				+content
				+"</form></div>";
    }
    */
    
	public static String fieldSet(String s) {
		return "<FIELDSET>" + s + "</FIELDSET>";
	}

	public static String hidden(String n, Object value) {
		return "<INPUT spellcheck=\"false\" TYPE=\"HIDDEN\" NAME=\"" + n + "\" VALUE=\"" + (value == null ? "" : value) + "\">";
	}

	public String input(int tabIndex, String n, Object value) {
		return "<INPUT spellcheck=\"false\"  NAME=\"" + n + "\" " + (isReadOnly() ? "DISABLED" : "") + "  VALUE=\"" + (value == null ? "" : value)
				+ "\" TABINDEX=" + tabIndex + ">";
	}

	public String input(int tabIndex, String c, String n, Object value) {
		return "<INPUT  spellcheck=\"false\" CLASS=\"" + c + "\" NAME=\"" + n + "\" TYPE=\"TEXT\" " + (isReadOnly() ? "DISABLED" : "") + "  VALUE=\""
				+ (value == null ? "" : value) + "\" TABINDEX=" + tabIndex + ">";
	}

	public String input(String n, Object value) {
		return "<INPUT  spellcheck=\"false\" NAME=\"" + n + "\" " + (isReadOnly() ? "DISABLED" : "") + "  VALUE=\"" + (value == null ? "" : value)
				+ "\">";
	}

	public String input(String c, String n, Object value) {
		return "<INPUT  spellcheck=\"false\" CLASS=\"" + c + "\" NAME=\"" + n + "\" TYPE=\"TEXT\" " + (isReadOnly() ? "DISABLED" : "") + "  VALUE=\""
				+ (value == null ? "" : value) + "\">";
	}

	public String input(String c, String n, Object value, int size) {
		return "<INPUT  spellcheck=\"false\" CLASS=\"" + c + "\" NAME=\"" + n + "\" TYPE=\"TEXT\" SIZE=" + size + (isReadOnly() ? "DISABLED" : "") + "  VALUE=\""
				+ (value == null ? "" : value) + "\">";
	}

	public String input(String n, Object value, int size) {
		return "<INPUT  spellcheck=\"false\" NAME=\"" + n + "\" SIZE=" + size + " " + (isReadOnly() ? "DISABLED" : "") + "  VALUE=\""
				+ (value == null ? "" : value) + "\">";
	}

	public String inputChanged(String n, Object value, String onChange, int size) {
		return "<INPUT  spellcheck=\"false\" " + (isReadOnly() ? "DISABLED" : "") + " NAME=\"" + n + "\" SIZE=" + size + " onChange=\"" + onChange
				+ "\" VALUE=\"" + (value == null ? "" : value) + "\">";
	}

	public String inputChanged(String n, Object value, String onChange) {
		return "<INPUT  spellcheck=\"false\" " + (isReadOnly() ? "DISABLED" : "") + " NAME=\"" + n + "\" onChange=\"" + onChange + "\" VALUE=\""
				+ (value == null ? "" : value) + "\">";
	}

	public static String inputDisabled(String n, Object value, int size) {
		return "<INPUT NAME=\"" + n + "\" SIZE=" + size + " DISABLED VALUE=\"" + (value == null ? "" : value) + "\">";
	}

	public static String password() {
		return "<INPUT TYPE=\"PASSWORD\" NAME=\"PASSWORD\">";
	}

	public static String password(String value) {
		return "<INPUT TYPE=\"PASSWORD\" NAME=\"PASSWORD\" VALUE=\"" + (value == null ? "" : value) + "\">";
	}

	public String checkbox(String name) {
		return "<INPUT TYPE=\"CHECKBOX\" " + (isReadOnly() ? "DISABLED" : "") + " NAME=\"" + name + "\">";
	}

	public String checkbox(String name, boolean checked) {
		return "<INPUT TYPE=\"CHECKBOX\" " + (isReadOnly() ? "DISABLED" : "") + " NAME=\"" + name + "\""
				+ ((checked) ? "CHECKED" : "") + ">";
	}

	public static String checkboxDisabled(String name) {
		return "<INPUT TYPE=\"CHECKBOX\" DISABLED NAME=\"" + name + "\">";
	}

	public static String checkboxDisabled(String name, boolean checked) {
		return "<INPUT TYPE=\"CHECKBOX\"DISABLED NAME=\"" + name + "\"" + ((checked) ? "CHECKED" : "") + ">";
	}

	public String radio(String name, String value) {
		return "<INPUT TYPE=\"RADIO\" " + (isReadOnly() ? "DISABLED" : "") + " NAME=\"" + name + "\" VALUE=\"" + value + "\">";
	}

	public String radioChecked(String name, String value) {
		return "<INPUT " + (isReadOnly() ? "DISABLED" : "") + " CHECKED  TYPE=\"RADIO\" NAME=\"" + name + "\" VALUE=\"" + value
				+ "\">";
	}

	public String textArea(String n, Object s) {
		return textArea(n, s, 10, 40);
	}

	public String textArea(String n, Object s, int rows, int cols) {
		return "<TEXTAREA  spellcheck=\"false\" NAME=\"" + n + "\" ROWS=\"" + rows + "\" COLS=\"" + cols + "\" " + (isReadOnly() ? "READONLY" : "")
				+ " >" + (s == null ? "" : s) + "</TEXTAREA>";
	}

	public String textArea(String n, Object s, int rows, int cols, String option) {
		return "<TEXTAREA  spellcheck=\"false\" NAME=\"" + n + "\" ROWS=\"" + rows + "\" COLS=\"" + cols + "\" " + (isReadOnly() ? "READONLY " : " ")
				+ option + ">" + (s == null ? "" : s) + "</TEXTAREA>";
	}

	public static String textAreaDisabled(String n, Object s, int rows, int cols) {
		return "<TEXTAREA  spellcheck=\"false\" NAME=\"" + n + "\" ROWS=\"" + rows + "\" COLS=\"" + cols + "\" DISABLED >" + (s == null ? "" : s)
				+ "</TEXTAREA>";
	}

	public static String textAreaReadOnly(String n, Object s, int rows, int cols) {
		return "<TEXTAREA NAME=\"" + n + "\" ROWS=\"" + rows + "\" COLS=\"" + cols + "\" READONLY >" + (s == null ? "" : s)
				+ "</TEXTAREA>";
	}

	public String submitButton() {
		return submitButton("Submit");
	}

	public String submitButton(String s) {
		return submitButton("SUBMIT", s);
	}

	public String submitButton(String n, String s) {
		return "<INPUT " + (isReadOnly() ? "DISABLED" : "") + "  CLASS=\"button\" TYPE=\"SUBMIT\" NAME=\"" + n + "\" VALUE=\"" + s
		+ "\"/>";
		//+ "\" ONCLICK='if (!this.submitted) { this.submitted = true; return true; } else return false;'>";
	}

	public String button(String name, String value, String text) {
		return "<BUTTON " + (isReadOnly() ? "DISABLED" : "") + "  CLASS=\"button\" NAME=\"" + name + "\" VALUE=\"" + value
//		+ "\" ONCLICK='if (!this.submitted) { this.submitted = true; return true; } else return false;'>"
		+ "\">"
				+ text + "</BUTTON>";
	}

	public String retrieveButton(String s) {
		return "<INPUT CLASS=\"button\" TYPE=\"SUBMIT\" NAME=\"SUBMIT\" VALUE=\"" + s
				+ "\" ONCLICK='if (!this.submitted) { this.submitted = true; return true; } else return false;'>";
	}

	public static String submitButtonDisabled(String n, String s) {
		return "<INPUT DISABLED CLASS=\"button\" TYPE=\"SUBMIT\" NAME=\"" + n + "\" VALUE=\"" + s
				+ "\" ONCLICK='if (!this.submitted) { this.submitted = true; return true; } else return false;'>";
	}

	public static String submitButtonDisabled(String s) {
		return submitButtonDisabled("SUBMIT", s);
	}

	public String deleteButton() {
		return deleteButton(Locale.getDefault(), Message.get(Locale.getDefault(), "DELETE"));
	}

	public String deleteButton(String s) {
		return deleteButton(Locale.getDefault(), s);
	}

	public String deleteButtonDisabled(String s) {
		return deleteButton(Locale.getDefault(), s);
	}

	public String deleteButton(Locale locale) {
		return deleteButton(locale, Message.get(locale,"DELETE"));
	}

	public String deleteButton(Locale locale, String s) {
		return "<INPUT " + (isReadOnly() ? "DISABLED" : "") + "  CLASS=\"button\" TYPE=\"SUBMIT\" NAME=\"SUBMIT\" VALUE=\"" + s
				+ "\" ONCLICK=\"javascript:if (confirm('" + Message.get(locale, "DELETE_MESSAGE") + "')) return true; else return false; \">";
	}

	public String confirmButton(String s, String c) {
		return "<INPUT " + (isReadOnly() ? "DISABLED" : "") + "  CLASS=\"button\" TYPE=\"SUBMIT\" NAME=\"SUBMIT\" VALUE=\"" + s
				+ "\" ONCLICK=\"javascript:if (confirm('" + c + "')) return true; else return false; \">";
	}

	public static String deleteButtonDisabled(Locale locale, String s) {
		return "<INPUT DISABLED CLASS=\"button\" TYPE=\"SUBMIT\" NAME=\"SUBMIT\" VALUE=\"" + Message.get(locale, s)
				+ "\" ONCLICK=\"javascript:if (confirm('" + Message.get(locale, "DELETE_MESSAGE")
				+ "')) return true; else return false; \">";
	}

	public String resetButton(String n, String v) {
		return "<INPUT " + (isReadOnly() ? "DISABLED" : "") + "  TYPE=reset CLASS=button NAME=\"" + n + "\" VALUE=\"" + v + "\">";
	}

	public static String line() {
		return line(0);
	}

	public static String line(int size) {
		return "<HR SIZE=\"" + size + "\">";
	}

	public static String bulletList(String s) {
		return "<UL>" + s + "</UL>";
	}

	public static String numberList(String s) {
		return "<OL>" + s + "</OL>";
	}

	public static String listItem(String s) {
		return "<LI>" + s;
	}

	public static String anchor(String name) {
		return "<A ID=\""+name+"\" NAME=\"" + name + "\"></A>";
	}
	public static String anchor(String name, String desc) {
		return "<A NAME=\"" + name + "\">" + desc + "</A>";
	}

	public static String link(String ref, String desc) {
		return "<A HREF=\"" + ref + "\">" + desc + "</A>";
	}

	public static String linkWithTip(String ref, String desc, String tooltip) {
		return "<A HREF=\"" + ref + "\" TITLE=\""+tooltip+"\">" + desc + "</A>";
	}

	public static String link(String ref, String desc, String target) {
		return "<A HREF=\"" + ref + "\" TARGET=\"" + target + "\">" + desc + "</A>";
	}

	public static String actionLink(String ref, String desc, String onClick) {
		return "<A HREF=\"" + ref + "\" OnClick=\"" + onClick + "\">" + desc + "</A>";
	}

	public static String actionLink(String ref, String desc, String onClick, String target) {
		return "<A HREF=\"" + ref + "\" TARGET=\"" + target + "\" OnClick=\"" + onClick + "\">" + desc + "</A>";
	}

	public static String mailLink(String recip, String subject, String body, String desc) throws UnsupportedEncodingException {
		return "<A HREF=\"mailto:" + recip + "?subject=" + URLEncoder.encode(subject, CHARACTER_ENCODING).replace('+', ' ')
				+ "&body=" + URLEncoder.encode(body, CHARACTER_ENCODING).replace('+', ' ') + "\">" + desc + "</A>";
	}

	public static String mailLink(String recip, String subject, String body, String onClick, String desc)
			throws UnsupportedEncodingException {
		return "<A HREF=\"mailto:" + recip + "?subject=" + URLEncoder.encode(subject, CHARACTER_ENCODING).replace('+', ' ')
				+ "&body=" + URLEncoder.encode(body, CHARACTER_ENCODING).replace('+', ' ') + "\" onClick=\"" + onClick + "\">"
				+ desc + "</A>";
	}

	public String fileInput(String name) {
		return "<INPUT TYPE=FILE " + (isReadOnly() ? "DISABLED" : "") + "  NAME=\"" + name + "\">";
	}

	public static String standardLayout(DatabaseConnection con, java.util.HashMap<String, String> parms, String html) {
		return span("header", (new Header()).getHTML(con, parms)) 
				+ span("menu", (new Menu()).getHTML(con, parms))
//				+ span("service", html);
				+ span("service", html);
	}

	public String pleaseWait(String url) {
		return head("Please Wait", "<SCRIPT LANGUAGE=JavaScript>\n" + "function init(){\n" + "	window.location = \"" + url
				+ "\";\n" + "}	\n" + "</SCRIPT>\n")
				+ "<BODY onload=init()>\n" + br() + br() + "<CENTER><IMG SRC=\"../images/hourglass.gif\"></CENTER>" + "</BODY>\n";
	}
	
	public static String getDateControlScript() {
		return 
		   "<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"../js/jscalendar-1.0/calendar-win2k-cold-1.css\" title=\"win2k-cold-1\" />\n"
		  +"<script type=\"text/javascript\" src=\"../js/jscalendar-1.0/calendar.js\"></script>\n"
		  +"<script type=\"text/javascript\" src=\"../js/jscalendar-1.0/lang/calendar-en.js\"></script>\n"
		  +"<script type=\"text/javascript\" src=\"../js/jscalendar-1.0/calendar-setup.js\"></script>\n";
	}

	public static String getAngularControlScript() {
		return "<script type=\"text/javascript\" src=\"../js/angular-permeagility.js\"></script>\n";
	}

	public static String getColorControlScript() {
		return "<script  type='text/javascript' src=\"../js/jscolor/jscolor.js\"></script>\n";
	}

	public static String getPrettyPhotoScript() {
		return
		"<link rel=\"stylesheet\" href=\"/js/prettyPhoto/prettyPhoto.css\" type=\"text/css\" media=\"screen\" charset=\"utf-8\" />\n"
		+"<script src=\"/js/prettyPhoto/jquery.prettyPhoto.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n"
		+"<script type=\"text/javascript\" charset=\"utf-8\">\n"
		+"		$(document).ready(function(){\n"
		+"		$(\"a[rel^='prettyPhoto']\").prettyPhoto({\n"
		+"			animation_speed: 'fast', /* fast/slow/normal */\n"
		+"			show_title: false, /* true/false */\n"
		+"			slideshow: false, /* false OR interval time in ms */\n"
		+"			autoplay_slideshow: false, /* true/false */\n"
		+"			opacity: 0.50, /* Value between 0 and 1 */\n"
		+"			allow_resize: false, /* Resize the photos bigger than viewport. true/false */\n"
		+"			});\n"
		+"		});\n"
		+"	</script>\n";
	}

	public static String getSortTableScript() {
		return "<script src=\"../js/sorttable.js\"></script>\n";
	}

	int dateControlCount = 0;
	int linkControlCount = 0;

	public String getColorControl(String formName, String controlName, String initialValue) {
		//dateControlCount++;
		//String varName = "dateControl" + dateControlCount;
		return "<input name='"+controlName+"' class='color' value='"+initialValue+"'>";
	}
	
	public String getDateControl(String formName, String controlName, String initialValue) {
		dateControlCount++;
		String varName = "dateControl" + dateControlCount;
		return "<table><tr><td><input type=\"text\" name=\""+controlName+"\" id=\""+varName+"\" value=\""+initialValue+"\" /></td>\n"
				+"<td><img src=\"/js/jscalendar-1.0/img.gif\" id=\""+varName+"_TRIG"+"\" style=\"cursor: pointer; border: 1px solid red;\" title=\"Date selector\"\n"
		        +" onmouseover=\"this.style.background='red';\" onmouseout=\"this.style.background=''\" /></td></tr></table>\n"
		        +"<script type=\"text/javascript\">\n"
		        +"Calendar.setup({\n"
		        +" inputField : \""+varName+"\",\n"
		        +" ifFormat   : \""+DATE_CONTROL_FORMAT+"\",\n"
		        +" button     : \""+varName+"_TRIG"+"\",\n"
		        +(initialValue==null ? "" : " date : new Date(\""+initialValue+"\"),\n")
		        //+" singleClick : true\n"
				+"});\n"
				+"</script>\n";
	}

	public String getDateTimeControl(String formName, String controlName, String initialValue) {
		dateControlCount++;
		String varName = "dateControl" + dateControlCount;
		return "<table><tr><td><input type=\"text\" name=\""+controlName+"\" id=\""+varName+"\" value=\""+initialValue+"\" /></td>\n"
				+"<td><img src=\"/js/jscalendar-1.0/img.gif\" id=\""+varName+"_TRIG"+"\" style=\"cursor: pointer; border: 1px solid red;\" title=\"Date selector\"\n"
		        +" onmouseover=\"this.style.background='red';\" onmouseout=\"this.style.background=''\" /></td></tr></table>\n"
		        +"<script type=\"text/javascript\">\n"
		        +"Calendar.setup({\n"
		        +" inputField : \""+varName+"\"\n"
		        +" ,ifFormat   : \""+DATE_CONTROL_FORMAT+" "+TIME_CONTROL_FORMAT+"\"\n"
		        +" ,showsTime   : true\n"
		        +" ,button     : \""+varName+"_TRIG"+"\"\n"
		        //+" singleClick : true\n"
		        +(initialValue==null ? "" : ", date : new Date(\""+initialValue+"\")\n")
				+"});\n"
				+"</script>\n";
	}

    public static String multiSelectList(String name, List<String> names, List<String> values, List<String> tooltips, Locale l) {
    	StringBuffer sb = new StringBuffer(1024);
    	sb.append("<SELECT NAME=\""+name+"\" SIZE=\""+names.size()+"\" MULTIPLE>\n");
    	for(int i=0; i < names.size();i++) {
    	    sb.append("<OPTION TITLE=\"" + tooltips.get(i) + "\" VALUE=\""+(String)values.get(i)+"\">"+(String)names.get(i)+"</OPTION>\n");
    	}
    	sb.append("</SELECT>\n");
    	return sb.toString();
    }

    /*
     * Build a list of checkboxes based on a query.  
     * 
     * name - HTML control name
     * qr - QueryResult 
     * l - locale
     * 
     * Your query result should have at least these four columns:
     * 
     * ID - The value to be returned when the checkbox is selected
     * NAME - The description that goes beside the checkbox
     * TOOLTIP - The popup message when the user hovers over the checkbox
     * CHECKED - Null means unchecked, non-null means checked
     */
    public static String multiCheckboxList(String name, QueryResult qr, Locale l, Set<ODocument> picked) {
	    Vector<String> names = new Vector<String>(qr.size());
	    Vector<String> values = new Vector<String>(qr.size());
	    Vector<String> tooltips = new Vector<String>(qr.size());
	    Vector<String> checks = new Vector<String>(qr.size());
	    for(ODocument row : qr.get()) {
	    	String rid = row.field("rid");
	    	if (rid == null) {
	    		rid = row.getIdentity().toString().substring(1);
	    	}
	    	values.add(rid);
	    	names.add((String)row.field("name"));
	    	checks.add((picked != null && picked.contains(row) ? "Y" : null));
	    }
	    return multiCheckboxList(name, names, values, tooltips, checks, l);
    }

    public static String multiCheckboxListWithGoto(String name, String table, QueryResult qr, Locale l, Set<ODocument> picked) {
	    Vector<String> names = new Vector<String>(qr.size());
	    Vector<String> values = new Vector<String>(qr.size());
	    Vector<String> tooltips = new Vector<String>(qr.size());
	    Vector<String> checks = new Vector<String>(qr.size());
	    for(ODocument row : qr.get()) {
	    	String rid = row.field("rid");
	    	if (rid == null) {
	    		rid = row.getIdentity().toString().substring(1);
	    	}
	    	values.add(rid);
	    	names.add((String)row.field("name") + "&nbsp;&nbsp;&nbsp;"+link("/permeagility.web.Table"
					+"?TABLENAME="+table
					+"&EDIT_ID="+rid, Message.get(l, "GOTO_ROW")));
	    	tooltips.add((String)row.field("tooltip"));
	    	checks.add((picked != null && picked.contains(row) ? "Y" : null));
	    }
	    return multiCheckboxList(name, names, values, tooltips, checks, l);
    }

    public static String multiCheckboxList(String name, List<String> names, List<String> values, List<String> tooltips, List<String> checks, Locale l) { 
    	StringBuffer sb = new StringBuffer(1024);
    	for(int i=0; i < names.size();i++) {
    	    sb.append("<INPUT TYPE=\"CHECKBOX\""
    	    		+(checks.get(i)==null ? "" : " CHECKED=\"yes"+"\"")
    	    		+" NAME=\""+name+"\""
    	    		+" TITLE=\""+tooltips.get(i)+"\""
    	    		+" VALUE=\""+(String)values.get(i)+"\">"
    	    		+(String)names.get(i)
    	    		+"</INPUT><BR>\n"
    	    );
    	}
    	return sb.toString();
    }

    public static String multiCheckboxList(String name, List<String> names, List<String> values, List<String> tooltips, Locale l) {
    	StringBuffer sb = new StringBuffer(1024);
    	for(int i=0; i < names.size();i++) {
    	    sb.append("<INPUT TYPE=\"CHECKBOX\" NAME=\""+name+"\" TITLE=\""+tooltips.get(i)+"\" VALUE=\""+(String)values.get(i)+"\">"+(String)names.get(i)+"</INPUT><BR>\n");
    	}
    	return sb.toString();
    }

    public String linkSetControl(String name, String table, QueryResult qr, Locale l, Set<ODocument> picked) {
	    Vector<String> names = new Vector<String>(qr.size());
	    Vector<String> values = new Vector<String>(qr.size());
	    Vector<String> tooltips = new Vector<String>(qr.size());
	    Vector<String> checks = new Vector<String>(qr.size());
	    for(ODocument row : qr.get()) {
	    	String rid = row.field("rid");
	    	if (rid == null) {
	    		rid = row.getIdentity().toString();
	    	}
	    	if (rid.startsWith("#")) rid = rid.substring(1);
	    	//System.out.println("adding rid "+rid);
	    	values.add(rid);
	    	names.add((String)row.field("name"));
	    	tooltips.add((String)row.field("tooltip"));
	    	boolean pick = false;
	    	if (picked != null) { // Find in the list of picked, hope it isn't long
	    		for (ODocument p : picked) {
	    			if (p.getIdentity().toString().substring(1).equals(rid)) {
	    				pick = true;
	    			}
	    		}
	    	}
	    	checks.add((pick ? "true" : "false"));
	    }
	    return getLinkSet(name, table, names, values, tooltips, checks, l);
    }
    
	  public String getLinkSet(String name, String table, List<String> names, List<String> values, List<String> tooltips, List<String> checks, Locale l) {   
		StringBuffer result = new StringBuffer();
		result.append("<div ng-controller=\"LinkSetControl\" ng-init=\"values=[\n");
		for (int i=0; i<names.size(); i++) {
			if (i > 0) { result.append(","); }
			result.append("{ name: '"+names.get(i)+"', rid: '"+values.get(i)+"', active:"+checks.get(i)+" }\n");
		}
		result.append("]\">\n");
		result.append("<ul>\n");
		result.append("  <li ng-tooltip=\"Link Set\" ng-repeat=\"v in values | filter: { active: true }\" \">\n");
		result.append("    {{v.name}}&nbsp;&nbsp;&nbsp;\n");
		result.append("    <A title=\"Click to delete\" ng-click=\"toggleActive(v)\">&times;</A>\n");
		result.append("    <A HREF=\"permeagility.web.Table?TABLENAME="+table+"&EDIT_ID={{v.rid}}\">Goto&gt;</A>\n");
		result.append("  </li>\n");
		result.append("</ul>\n");
		result.append("Add/Remove ");
		result.append("  <select ng-model=\"selValue\" ng-options=\"v.name for v in values\" ng-change=\"toggleActive(selValue)\">\n");
		result.append("    <option value=\"\">None</option>\n");
		result.append("      </select>\n");
		result.append("<INPUT CLASS=\"text\" TYPE=\"hidden\" NAME=\""+name+"\"  VALUE=\"{{resultList()}}\"/>\n");  // TYPE=\"hidden\"
		result.append("</div>\n");
  	return result.toString();
  }

	public String linkListControl(DatabaseConnection con, String name, String table, QueryResult qr, Locale l, List<ODocument> picked) {
		HashMap<String,Integer> listMap = new HashMap<String,Integer>();  // for keeping counts of objects LinkList can have duplicates
		Vector<String> names = new Vector<String>(qr.size());
	    Vector<String> values = new Vector<String>(qr.size());
	    Vector<String> tooltips = new Vector<String>(qr.size());
	    Vector<String> checks = new Vector<String>(qr.size());
	    Vector<String> listnames = new Vector<String>(qr.size());
	    Vector<String> listvalues = new Vector<String>(qr.size());
	    Vector<String> listtooltips = new Vector<String>(qr.size());
	    Vector<String> listchecks = new Vector<String>(qr.size());
	    if (picked != null) {
		    for(ODocument pick : picked) {
		    	String rid = pick.field("rid");
		    	if (rid == null) {
		    		rid = pick.getIdentity().toString();
		    	}
		    	if (rid.startsWith("#")) rid = rid.substring(1);
		    	listvalues.add(rid);
		    	listnames.add(getDescriptionFromDocument(con, pick));
		    	listtooltips.add((String)pick.field("tooltip"));
		    	Integer active = listMap.get(rid);
		    	if (active == null) {
		    		active = new Integer(1);
		    	} else {
		    		active = new Integer(active.intValue()+1);
		    	}
		    	//System.out.println("Adding to listValues: "+rid+" active="+active);
		    	listMap.put(rid, active);	    	
		    	listchecks.add(active.toString());
		    }
	    }
	    for(ODocument row : qr.get()) {
	    	String rid = row.field("rid");
	    	if (rid == null) {
	    		rid = row.getIdentity().toString();
	    	}
	    	if (rid.startsWith("#")) rid = rid.substring(1);
	    	values.add(rid);
	    	names.add((String)row.field("name"));
	    	tooltips.add((String)row.field("tooltip"));
	    	Integer active = listMap.get(rid);
	    	if (active == null) {
	    		active = new Integer(0);
	    	} else {
	    		active = new Integer(active.intValue());
	    	}
	    	checks.add(active.toString());
	    }
	    return getLinkList(name, table, names, values, tooltips, checks, listnames, listvalues, listtooltips, listchecks, l);
	}

	public String getLinkList(String name, String table, List<String> names, List<String> values, List<String> tooltips, List<String> checks, List<String> listnames, List<String> listvalues, List<String> listtooltips, List<String> listchecks, Locale l) {   
		StringBuffer result = new StringBuffer();
		result.append("<div ng-controller=\"LinkListControl\" ng-init=\"values=[\n");
		for (int i=0; i<names.size(); i++) {
			if (i > 0) { result.append(","); }
			result.append("{ name: '"+names.get(i)+"', rid: '"+values.get(i)+"', active:"+checks.get(i)+" }\n");
		}
		result.append("];\n listValues=[");
		for (int i=0; i<listnames.size(); i++) {
			if (i > 0) { result.append(","); }
			result.append("{ name: '"+listnames.get(i)+"', rid: '"+listvalues.get(i)+"', active:"+listchecks.get(i)+" }\n");
		}
		result.append("];\">\n");
		result.append("<ol>\n");
		result.append("  <li ng-tooltip=\"Click to remove\" ng-repeat=\"v in listValues\">\n");
		result.append("    <A title=\"Click to move up\" ng-click=\"up(v)\">&#x2191;</A>\n");
		result.append("    <A title=\"Click to move down\" ng-click=\"down(v)\">&#x2193;</A>\n");
		result.append("    {{v.name}}&nbsp;&nbsp;&nbsp;\n");
		result.append("    <A title=\"Click to delete\" ng-click=\"delete(v)\">&times;</A>\n");
		result.append("    <A HREF=\"permeagility.web.Table?TABLENAME="+table+"&EDIT_ID={{v.rid}}\">Goto&gt;</A>\n");
		result.append("  </li>\n");
		result.append("</ol>\n");
		result.append("Add ");
		result.append("  <select ng-model=\"selValue\" ng-options=\"v.name for v in values\" ng-change=\"selected(selValue)\">\n");
		result.append("    <option value=\"\">None</option>\n");
		result.append("      </select>\n");
		result.append("<INPUT CLASS=\"text\" TYPE=\"hidden\" NAME=\""+name+"\"  VALUE=\"{{resultList()}}\"/>\n");  // TYPE=\"hidden\"
//		result.append("<INPUT CLASS=\"text\" NAME=\""+name+"\"  VALUE=\"{{resultList()}}\"/>\n"); 
		result.append("</div>\n");
		return result.toString();
	}

	public String linkMapControl(DatabaseConnection con, String name, String table, QueryResult qr, Locale l, Map<String,ODocument> picked) {
		HashMap<String,Integer> listMap = new HashMap<String,Integer>();  // for keeping counts of objects LinkList can have duplicates
	    Vector<String> names = new Vector<String>(qr.size());
	    Vector<String> values = new Vector<String>(qr.size());
	    Vector<String> tooltips = new Vector<String>(qr.size());
	    Vector<String> checks = new Vector<String>(qr.size());
	    Vector<String> listmaps = new Vector<String>(qr.size());
	    Vector<String> listnames = new Vector<String>(qr.size());
	    Vector<String> listvalues = new Vector<String>(qr.size());
	    Vector<String> listtooltips = new Vector<String>(qr.size());
	    Vector<String> listchecks = new Vector<String>(qr.size());
	    if (picked != null) {
	    	for (String key : picked.keySet()) {
	    		ODocument pick = picked.get(key);
	    		if (pick != null) {
	    			String rid = pick.field("rid");
	    			if (rid == null) {
	    				rid = pick.getIdentity().toString();
	    			}
			    	if (rid.startsWith("#")) rid = rid.substring(1);
	    			listmaps.add(key);
	    			listvalues.add(rid);
			    	listnames.add(getDescriptionFromDocument(con, pick));
			    	listtooltips.add((String)pick.field("tooltip"));
			    	Integer active = listMap.get(rid);
			    	if (active == null) {
			    		active = new Integer(1);
			    	} else {
			    		active = new Integer(active.intValue()+1);
			    	}
			    	//System.out.println("Adding to listValues: "+rid+" active="+active);
			    	listMap.put(rid, active);	    	
			    	listchecks.add(active.toString());
	    		}
		    }
	    }
	    for(ODocument row : qr.get()) {
	    	String rid = row.field("rid");
	    	if (rid == null) {
	    		rid = row.getIdentity().toString();
	    	}
	    	if (rid.startsWith("#")) rid = rid.substring(1);
	    	values.add(rid);
	    	names.add((String)row.field("name"));
	    	tooltips.add((String)row.field("tooltip"));
	    	Integer active = listMap.get(rid);
	    	if (active == null) {
	    		active = new Integer(0);
	    	} else {
	    		active = new Integer(active.intValue());
	    	}
	    	checks.add(active.toString());
	    }
	    return getLinkMap(name, table, names, values, tooltips, checks, listmaps, listnames, listvalues, listtooltips, listchecks, l);
	}

	public String getLinkMap(String name, String table, List<String> names, List<String> values, List<String> tooltips, List<String> checks, List<String> listmaps, List<String> listnames, List<String> listvalues, List<String> listtooltips, List<String> listchecks, Locale l) {   
		StringBuffer result = new StringBuffer();
		result.append("<div ng-controller=\"LinkMapControl\" ng-init=\"values=[\n");
		for (int i=0; i<names.size(); i++) {
			if (i > 0) { result.append(","); }
			result.append("{ name: '"+names.get(i)+"', rid: '"+values.get(i)+"', active:"+checks.get(i)+" }\n");
		}
		result.append("];\n listValues=[");
		for (int i=0; i<listnames.size(); i++) {
			if (i > 0) { result.append(","); }
			result.append("{ name: '"+listnames.get(i)+"', rid: '"+listvalues.get(i)+"', map:'"+listmaps.get(i)+"', active:"+listchecks.get(i)+" }\n");
		}
		result.append("];\">\n");
		result.append(" <ol>\n");
		result.append("  <li ng-tooltip=\"Use controls to move or delete items\" ng-repeat=\"v in listValues\">\n");
		result.append("<A title=\"Click to move up\" ng-click=\"up(v)\">&#x2191;</A>&nbsp;");
		result.append("<A title=\"Click to move down\" ng-click=\"down(v)\">&#x2193;</A>&nbsp;");
		result.append("<INPUT CLASS=\"text\" NAME=\"map\" ng-model=\"v.map\" SIZE=20  VALUE=\"{{v.map}}\"/>&nbsp;");
		result.append("{{v.name}}&nbsp;&nbsp;&nbsp;");
		result.append("  <A title=\"Click to delete\" ng-click=\"delete(v)\">&times;</A>\n");
		result.append("  <A HREF=\"permeagility.web.Table?TABLENAME="+table+"&EDIT_ID={{v.rid}}\">Goto&gt;</A>\n");
		result.append("  </li>\n");
		result.append(" </ol>\n");
		result.append("Add&nbsp;");
		result.append("  <select ng-model=\"selValue\" ng-options=\"v.name for v in values\" ng-change=\"selected(selValue)\">\n");
		result.append("    <option value=\"\">None</option>\n");
		result.append("  </select>\n");
		result.append("<INPUT CLASS=\"text\" TYPE=\"hidden\" NAME=\""+name+"\"  VALUE=\"{{resultList()}}\"/>\n");  // TYPE=\"hidden\"
//		result.append("<INPUT CLASS=\"text\" NAME=\""+name+"\"  VALUE=\"{{resultList()}}\"/>\n"); 
		result.append("</div>\n");
		return result.toString();
	}
	
	public static String createListFromCache(String name, String initial, DatabaseConnection con, String query) {
		return createListFromCache(name, initial, con, query, null, true, null, true);
	}

	public static String createListFromCache(String name, String initial, DatabaseConnection con, String query
			, String attributes, boolean allowNull, String classname, boolean enabled) {
		QueryResult qr = queryCache.getResult(con, query);
		StringBuffer sb = new StringBuffer(1024);
		sb.append("<SELECT " + (enabled ? "" : "DISABLED") + (classname != null ? " CLASS=\"" + classname + "\"" : "") + " NAME=\""
				+ name + "\" " + (attributes != null ? attributes : "") + ">\n");
		if (initial == null && allowNull) {
			sb.append("<OPTION SELECTED VALUE=null>" + "Select" + "\n");
		} else if (allowNull) {
			sb.append("<OPTION VALUE=null>" + "None" + "\n");
		}
		if (qr != null) {
			for (ODocument item : qr.get()) {
				String id = item.getIdentity().toString();
				if (item.field("rid") != null) {
					String d = item.field("rid");
					if (d != null) {
						id = d;
					}
				}
		    	if (id.startsWith("#")) id = id.substring(1);
				String itemname = null;
				itemname = item.field("name");
				if (itemname == null) {
					itemname = item.field("Name");					
				}
				if (itemname == null && item.fields()>0) {
					itemname = item.field(item.fieldNames()[1]).toString();
				}
				sb.append("<OPTION ");
				if (initial != null && initial.equals(id)) {
					sb.append("SELECTED ");
				}
				sb.append(" VALUE=\"");
				sb.append(id);
				sb.append("\">");
				sb.append(itemname == null ? id : itemname);
				sb.append("\n");
			}
		}
		sb.append("</SELECT>\n");
		return sb.toString();
	}

	public static String getQueryForTable(DatabaseConnection con, String table) {
		String query = "SELECT FROM "+table;
		QueryResult lists = getCache().getResult(con, "SELECT tablename, query FROM pickList WHERE tablename='"+table+"'");
		if (lists != null && lists.size()>0) {
			return lists.getStringValue(0, "query");
		}
		return query;
	}

	public static String createListFromTable(String name, String initial, DatabaseConnection con, String table, String onChange,
			boolean allowNull, String classname, boolean enabled) {
		return createListFromCache(name, initial, con, getQueryForTable(con,table),onChange, allowNull, classname, enabled);
	}

	public static String getDescriptionFromDocument(DatabaseConnection con, ODocument document) {
		if (document == null) {
			return "Null";
		} else {
			//System.out.println("document="+document.getIdentity()+" class="+document.getClassName());
			return getDescriptionFromTable(con, document.getClassName(), document.getIdentity().toString());
		}
	}
	
	public static String getDescriptionFromTable(DatabaseConnection con, String table, String id) {
		//System.out.println("GetDescriptionFromTable table="+table+" id="+id);
		if (id == null || id.equals("")) return "None";
		//System.out.println(getQueryForTable(con, table));
		QueryResult qr = getCache().getResult(con, getQueryForTable(con, table));
		if (qr != null) {
			int r = qr.findFirstRow("rid", id);
			if (r > -1) {
				return qr.getStringValue(r, "name");
			} else {
				return "Not found";
			}
		} else {
			return "None";
		}
	}
	
	public static String createListFromTable(String name, String initial, DatabaseConnection con, String table) {
		return createListFromTable(name, initial, con, table, null, true, null, true);
	}

	public static String createList(Locale locale, String name, String initial, List<String> names, String attributes, boolean allowNull,
			String classname, boolean enabled) {
		StringBuffer sb = new StringBuffer(1024);
		sb.append("<SELECT " 
				+ (enabled ? "" : "DISABLED") 
				+ (classname != null ? " CLASS=\"" + classname + "\"" : "") 
				+ " NAME=\"" + name + "\" " 
				+ (attributes != null ? attributes : "") + ">\n");
		if (initial == null && allowNull) {
			sb.append("<OPTION SELECTED VALUE=null>" + "Select" + "\n");
		} else if (allowNull) {
			sb.append("<OPTION VALUE=null>" + Message.get(locale,"OPTION_NONE"));
		}
		for (String item : names) {
			sb.append("<OPTION ");
			if (initial != null && item.equals(initial)) {
				sb.append("SELECTED ");
			}
			sb.append(">");
			sb.append(item);
		}
		sb.append("</SELECT>\n");
		return sb.toString();
	}

	public static String selectList(String name, List<String> selected, List<String> names, List<String> values, Locale l, String Class, int size) {
		if (selected == null) {
			selected = new Vector<String>();
		}
		StringBuffer sb = new StringBuffer(1024);
		sb.append("<SELECT NAME=\"" + name + "\" CLASS=\"" + Class + "\" SIZE=\"" + size + "\" MULTIPLE>\n");
		for (int i = 0; i < names.size(); i++) {
			if (selected.indexOf((String) names.get(i)) == -1) {
				sb.append("<OPTION VALUE=\"" + (String) values.get(i) + "\">" + (String) names.get(i) + "</OPTION>\n");
			} else {
				sb.append("<OPTION SELECTED VALUE=\"" + (String) values.get(i) + "\">" + (String) names.get(i) + "</OPTION>\n");
			}
		}
		sb.append("</SELECT>\n");
		return sb.toString();
	}

	public String getStyles() {
		if (internal_con != null && internal_con.isConnected()) {
			QueryResult qr = queryCache.getResult(internal_con, "SELECT description FROM style WHERE name='"+ DEFAULT_STYLE + "'");
			if (qr != null && qr.size() > 0) {
				return qr.getStringValue(0, "description");
			}
			System.out.println("Unable to load style sheet called: "+DEFAULT_STYLE);
		}
		return DatabaseSetup.DEFAULT_STYLESHEET;
	}

	public static boolean isNullOrBlank(String string) {
		if (string == null) {
			return true;
		} else if (string.trim().equals("")) {
			return true;
		} else {
			return false;
		}
	}

	public static boolean valueChanged(Object oldObject, Object newObject) {
		if (oldObject == null && newObject != null) {
			// System.out.println("New Value");
			return true;
		} else if (oldObject != null && newObject != null) {
			// System.out.println("old="+oldObject+" new="+newObject);
			if (oldObject instanceof Number && newObject instanceof Number) {
				if (((Number) oldObject).doubleValue() != ((Number) newObject).doubleValue()) {
					// System.out.println("NumberChanged!="+newObject);
					return true;
				} else {
					return false;
				}
			} else if (!oldObject.equals(newObject)) {
				// System.out.println(oldObject.getClass().getName()+"!="+newObject.getClass().getName());
				return true;
			}
		}
		return false;
	}

	public static BigDecimal roundDouble(double value, int precision) {
		try {
			BigDecimal n = new BigDecimal(value);
			return n.setScale(precision, BigDecimal.ROUND_HALF_UP);
		} catch (Exception e) {
			return new BigDecimal(0.0);
		}
	}

	public static BigDecimal roundDouble(Number value, int precision) {
		return roundDouble(value.doubleValue(), precision);
	}

	// Localized number and date handling methods
	// ------------------------------------------

	/**
	 * Format a number based on locale and return the formatted number as a
	 * string
	 */
	public static String formatNumber(Object locale, Number n, String format) {
		if (n == null) {
			return "";
		}
		Locale l = null;
		if (locale != null && locale instanceof Locale) {
			l = (Locale) locale;
		}
		DecimalFormat numberFormat = new DecimalFormat(format);
		if (l != null) {
			numberFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(l));
		}

		numberFormat.applyPattern(format);
		return numberFormat.format(n);
	}

	/**
	 * Format a number based on locale and return the formatted number as a
	 * string
	 */
	public static String formatNumber(Object locale, Number n, String format, int precision) {
		if (n == null) {
			return "";
		}
		Locale l = null;
		if (locale != null && locale instanceof Locale) {
			l = (Locale) locale;
		}
		DecimalFormat numberFormat = new DecimalFormat(format);
		if (l != null) {
			numberFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(l));
		}

		numberFormat.applyPattern(format);
		return ((n.doubleValue() == 0.0 ? numberFormat.format(new Double(0.0)) : numberFormat.format(roundDouble(n.doubleValue(),
				precision))));
	}

	/**
	 * Format a number based on locale and return the formatted number as a
	 * string
	 */
	public static String formatNumber(Object locale, double n, String format) {
		Locale l = null;
		if (locale != null && locale instanceof Locale) {
			l = (Locale) locale;
		}
		DecimalFormat numberFormat = new DecimalFormat(format);
		if (l != null) {
			numberFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(l));
		}
		numberFormat.applyPattern(format);
		return numberFormat.format(n);
	}

	public static String formatNumber(Object locale, double n, String format, int precision) {
		Locale l = null;
		if (locale != null && locale instanceof Locale) {
			l = (Locale) locale;
		}
		DecimalFormat numberFormat = new DecimalFormat(format);
		if (l != null) {
			numberFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(l));
		}
		numberFormat.applyPattern(format);
		return numberFormat.format(roundDouble(n, precision));

	}

	/**
	 * Parse a string number based on locale and return the number
	 */
	public static Number parseNumber(Object locale, String s) {
		Locale l = null;
		if (locale != null && locale instanceof Locale) {
			l = (Locale) locale;
		}
		DecimalFormat numberFormat = new DecimalFormat();
		if (l != null) {
			numberFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(l));
		}
		Number n = null;
		if (s != null) {
			s = s.trim();
			try {
				n = numberFormat.parse(s);
			} catch (Exception e) {}
		}
		return n;
	}

	public static String formatDate(Locale locale, long secondsSinceEpoch, String format) {
		try {
			SimpleDateFormat dateTimeFormat = new SimpleDateFormat(format, locale);
			return dateTimeFormat.format(new java.util.Date(secondsSinceEpoch * 1000L));
		} catch (Exception e) {
			System.out.println("Bad date format given: "+format);
			SimpleDateFormat dateTimeFormat = new SimpleDateFormat(DATE_FORMAT, locale);
			return dateTimeFormat.format(new java.util.Date(secondsSinceEpoch * 1000L));			
		}
	}

	/**
	 * Format a date based on locale and return the formatted date as a string
	 */
	public static String formatDate(Locale locale, Date dateToFormat, String format) {
		SimpleDateFormat dateTimeFormat = new SimpleDateFormat(format, locale);
		return dateTimeFormat.format(dateToFormat);
	}

	/**
	 * Format an end date based on locale and return the formatted date as a
	 * string 
	 * If INCLUSIVE_END_DAY is set, one day is subtracted from the
	 * date before formatting
	 */
	public static String formatEndDate(Locale locale, long secondsSinceEpoch, String format) {
		SimpleDateFormat dateTimeFormat = new SimpleDateFormat(format, locale);
		return dateTimeFormat.format(new java.util.Date((secondsSinceEpoch - (INCLUSIVE_END_DAY ? 86400L : 0)) * 1000L));
	}

	/**
	 * Parse a string date based on locale and return the date 
	 */
	public static Date parseDate(Locale locale, String dayString, String format) {
		if (dayString == null) {
			return null;
		} else {
			try {
				SimpleDateFormat sdf = new SimpleDateFormat(format, locale);
				sdf.setLenient(false);
				return sdf.parse(dayString);
			} catch (ParseException pe) {
				System.out.println("Weblet: cannot parse date "+dayString);
				// pe.printStackTrace();
				return null;
			}
		}
	}

	/**
	 * Parse a string date based on locale and return the date 
	 */
	public static Date parseDate(Locale locale, String dayString) {
		return parseDate(locale, dayString, DATE_FORMAT);
	}

	/**
	 * Parse a string end date based on locale and return the date in seconds
	 * since the epoch
	 * If INCLUSIVE_END_DAY is set, one day is added to the parsed
	 * date
	 */
	public static Date parseEndDate(Locale locale, String dayString, String format) {
		Date d = parseDate(locale, dayString, format);
		if (d == null) {
			return null;
		} else {
			if (INCLUSIVE_END_DAY) {
				d = new Date(d.getTime() + (86400*1000));
			}
			return d;
		}
	}

	/**
	 * Parse a string end date based on locale and return the date in seconds
	 * since the epoch
	 * If INCLUSIVE_END_DAY is set, one day is added to the parsed
	 * date
	 */
	public static Date parseEndDate(Locale locale, String dayString) {
		Date d = parseDate(locale, dayString);
		if (d == null) {
			return null;
		} else {
			if (INCLUSIVE_END_DAY) {
				d = new Date(d.getTime() + (86400*1000));
			}
			return d;
		}
	}

	/**
	 * Returns Default time zone offset for given date in minutes
	 */
	public static int getTimeOffset(Calendar date) {
		return (date.get(Calendar.ZONE_OFFSET) + date.get(Calendar.DST_OFFSET)) / 1000 / 60;
	}

	/**
	 * Returns Default time zone offset for given date (in seconds) in minutes
	 */
	public static int getTimeOffset(long sec) {
		Calendar date = Calendar.getInstance();
		date.setTime(new java.util.Date(sec * 1000));
		return (date.get(Calendar.ZONE_OFFSET) + date.get(Calendar.DST_OFFSET)) / 1000 / 60;
	}

	/**
	 * Returns Start of day HH:mm
	 */
	public static String getStartofDay() {
		if (START_HOUR < 10) {
			return "0" + START_HOUR + ":00";
		} else {
			return START_HOUR + ":00";
		}
	}

	DecimalFormat decimalFormat = new DecimalFormat(DECIMAL_FORMAT);

	public String debug(Object o) {
		return "<br>--Debug--<br>\n" + o.toString() + "\n<br>--Debug--<br>\n";
	}

	public boolean isReadOnly() {
		return false;
	}

	/** this is faster than Regex parsing */
	public String[] splitCSV(String input) {
		List<String> tokensList = new ArrayList<String>();
		StringBuilder b = new StringBuilder();
		int itemCount = 0;
		Stack<Character> quotes = new Stack<Character>(); 
		for (char c : input.toCharArray()) {
		    switch (c) {
			    case ',':
			        if (!quotes.isEmpty()) {
			            b.append(c);
			        } else {
			            tokensList.add(b.toString());
			            itemCount++;
			            b = new StringBuilder();
			        }
			        break;
			    case '\"': case '\'':
			    	if (c == '\'' && !quotes.empty() && quotes.peek().equals('\"')) { // Ignore single quotes inside double (apostrophe in data)
			    	} else if (!quotes.empty() && quotes.peek().equals(c)) {
			    		quotes.pop(); // Coming out
			    	} else {
			    		quotes.push(new Character(c)); // Going in
			    	}
			    default:
			        b.append(c);
			    break;
		    }
		}
		if (b.length()>0) {
			tokensList.add(b.toString());
			itemCount++;
		}
		System.out.println("splitCSV turned "+input+" into "+tokensList);
		String[] temp = new String[itemCount];
		return tokensList.toArray(temp);
	}

	public static String wrapWithQuotes(String what) {
		if (what == null || what.equals("")) {
			return "null";
		} else {
			return '"'+what.replace("\"", "'")+'"';
		}
	}

	/** Turn a camelCase into "Camel Case" */
	public static String makeCamelCasePretty(String input) {
		StringBuffer cn = new StringBuffer();
		if (input.startsWith("_")) input = input.substring(1);  // Remove possible leading underscore (_allowREAD)
		char[] chars = input.toCharArray();
		for (int i=0; i<chars.length; i++) {
			if (i == 0) {
				cn.append(Character.toUpperCase(chars[i]));
			} else {
				if (Character.isUpperCase(chars[i])) {
					if (i > 0 && Character.isLowerCase(chars[i-1])) {
						cn.append(' ');
					}
					if (i + 1 < chars.length && Character.isLowerCase(chars[i+1])) {
						cn.append(' ');
					}
				}
				cn.append(chars[i]);
			}
		}
		return cn.toString();
	}

	/** Turn text into a camelCase valid identifier 
	 * ie. "Camel Case" becomes "camelCase" 
	 * "first name" becomes "firstName" 
	 * "User ID" becomes "userId" 
	 * "USER_ID" becomes "userId" (Note: if all caps, will be turned to all lowercase)
	 * "543-device-reading" becomes "n543DeviceReading" ??? */
	public static String makePrettyCamelCase(String input) {
		StringBuffer cn = new StringBuffer();
		if (input.startsWith("_")) input = input.substring(1);  // Remove possible leading underscore (_allowREAD)
		char[] chars = input.toCharArray();
		
		// If the name is all uppercase (looking at you Oracle), then lowerCase it all before processing 
		// Underlines will cause camel casing to happen
		boolean isUpperCase = true;
		for (int i=0; i<chars.length; i++) {
			if (Character.isLowerCase(chars[i])) {
				isUpperCase = false;
			}
		}
		if (isUpperCase) {
			chars = input.toLowerCase().toCharArray();
		}
		
		for (int i=0; i<chars.length; i++) {
			if (i == 0) {
				if (chars[i] >= '0' && chars[i] <= '9') {
					cn.append('n');					
					cn.append(chars[i]);					
				} else {
					cn.append(Character.toLowerCase(chars[i]));
				}
			} else if (chars[i] == '#') {
				cn.append("Num");
			} else if (chars[i] == '&') {
				cn.append("And");
			} else if (chars[i] == '_' || chars[i] == ' ' || chars[i] == '&' || chars[i] == '\''
				|| chars[i] == '\\' || chars[i] == '/' || chars[i] == '.' || chars[i] == ','
				|| chars[i] == '(' || chars[i] == ')' || chars[i] == '{' || chars[i] == '}'
				|| chars[i] == '@' || chars[i] == '!' || chars[i] == '?' || chars[i] == '<' 
				|| chars[i] == '>' || chars[i] == '+' || chars[i] == '-' || chars[i] == ';'  || chars[i] == ':'
				|| chars[i] == '[' || chars[i] == ']' || chars[i] == '$' || chars[i] == '*') {  // Don't bring these
				if (i < chars.length - 1) {  // and ensure next is uppercase as long as we are not at the end
					chars[i+1] = Character.toUpperCase(chars[i+1]);
				}
			} else {
				cn.append(chars[i]);
			}
		}
		return cn.toString();
	}

}
